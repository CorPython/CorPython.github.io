<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code show的博客</title>
    <link>https://CorPython.github.io/</link>
    <description>Recent content on code show的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Jan 2020 15:47:07 +0800</lastBuildDate>
    
	<atom:link href="https://CorPython.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>你好,2020</title>
      <link>https://CorPython.github.io/post/%E4%BD%A0%E5%A5%BD2020/</link>
      <pubDate>Wed, 01 Jan 2020 20:42:17 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E4%BD%A0%E5%A5%BD2020/</guid>
      <description>告别2019,展望2020 ​ 2019年走完了最后一天,迎来了全新的2020年.去年这一年总的来说并不是很满意,学习成绩表现没有2018年那么令人满意了,可能是因为我自己对于考试的漫不经心,也可能是我自己没有追求高分的欲望.面对着自己不是特别感兴趣的硬件似乎丧失了我的学习动力!但是</description>
    </item>
    
    <item>
      <title>Leetcode229题</title>
      <link>https://CorPython.github.io/post/leetcode229%E9%A2%98/</link>
      <pubDate>Sun, 19 Jan 2020 15:47:07 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/leetcode229%E9%A2%98/</guid>
      <description>题目 给定一个大小为 n 的数组，找出其中所有出现超过 ⌊ n/3 ⌋ 次的元素。 说明: 要求算法的时间复杂度为 O(n)，空间复杂度为 O(1)。 示例 1: 输入: [3,2,3] 输出: [3] 示例 2: 输入: [1,1,1,3,3,2,2,2] 输出: [1,2] 题解 1.投票法 由于要求找到的是出现次数超过⌊ n/3 ⌋ 的元素,所以最多可以找到两个不同的数字,假定两个结果候选人者,遍</description>
    </item>
    
    <item>
      <title>hugo添加fancybox功能</title>
      <link>https://CorPython.github.io/post/hugo%E4%BD%BF%E7%94%A8fancybox%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Sat, 18 Jan 2020 10:23:53 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo%E4%BD%BF%E7%94%A8fancybox%E5%8A%9F%E8%83%BD/</guid>
      <description>前言 一直想给博客加上图片灯箱功能,可是一直google不到解决方案,或者一堆没有用的教程,今天通过查阅fancybox官网找到了解决方案.通过在博客中添加&amp;lt; a &amp;gt;标签来实现该功能 使用说明 1.加载jqury和fancybox文件,在博客文件footer.html中添加下面</description>
    </item>
    
    <item>
      <title>Hugo0.60以上缺少html标签内的内容</title>
      <link>https://CorPython.github.io/post/hugo6.0%E4%BB%A5%E4%B8%8A%E7%BC%BA%E5%B0%91html%E6%A0%87%E7%AD%BE%E5%86%85%E5%AE%B9/</link>
      <pubDate>Sat, 18 Jan 2020 09:05:35 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo6.0%E4%BB%A5%E4%B8%8A%E7%BC%BA%E5%B0%91html%E6%A0%87%E7%AD%BE%E5%86%85%E5%AE%B9/</guid>
      <description>新版Hugo无法渲染html标签 在更新到Hugo版本0.62之后,我发现生成的HTML文件中缺少所有使用HTML标记的图像。原因是.以前,Hugo使用 Blackfriday渲染Markdown文件。从Hugo 0.60版本开始，默认的Markdown渲染器已更改为goldmark。</description>
    </item>
    
    <item>
      <title>Hugo添加latex公式渲染</title>
      <link>https://CorPython.github.io/post/hugo%E6%B7%BB%E5%8A%A0latex%E5%85%AC%E5%BC%8F%E6%B8%B2%E6%9F%93/</link>
      <pubDate>Thu, 16 Jan 2020 19:23:38 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo%E6%B7%BB%E5%8A%A0latex%E5%85%AC%E5%BC%8F%E6%B8%B2%E6%9F%93/</guid>
      <description>使用方法 经过一番google后找到的这个方案!这个想法是通过将所有内容都包含在同一代码中&amp;lt; script &amp;gt;并添加async来实现渲染 &amp;lt;script type=&amp;#34;text/javascript&amp;#34; async src=&amp;#34;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;#34;&amp;gt; MathJax.Hub.Config({ tex2jax: { inlineMath: [[&amp;#39;$&amp;#39;,&amp;#39;$&amp;#39;], [&amp;#39;\\(&amp;#39;,&amp;#39;\\)&amp;#39;]], displayMath: [[&amp;#39;$$&amp;#39;,&amp;#39;$$&amp;#39;]], processEscapes: true, processEnvironments: true, skipTags: [&amp;#39;script&amp;#39;, &amp;#39;noscript&amp;#39;, &amp;#39;style&amp;#39;, &amp;#39;textarea&amp;#39;, &amp;#39;pre&amp;#39;], TeX: { equationNumbers: { autoNumber: &amp;#34;AMS&amp;#34; }, extensions: [&amp;#34;AMSmath.js&amp;#34;, &amp;#34;AMSsymbols.js&amp;#34;] } } }); MathJax.Hub.Queue(function() { // Fix &amp;lt;code&amp;gt; tags after MathJax finishes running. This is a // hack to overcome a shortcoming of Markdown. Discussion at // https://github.com/mojombo/jekyll/issues/199 var all = MathJax.Hub.getAllJax(), i; for(i = 0; i &amp;lt; all.length; i += 1)</description>
    </item>
    
    <item>
      <title>STL基础用法</title>
      <link>https://CorPython.github.io/post/STL%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</link>
      <pubDate>Tue, 14 Jan 2020 20:35:27 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/STL%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</guid>
      <description>排序 1.sort()模板函数 #include&amp;lt;iostream&amp;gt;#include&amp;lt;algorithm&amp;gt; using namespace std; int main() { int a[10]= {9,6,3,8,5,2,7,4,1,0}; for(int i=0; i&amp;lt;10; i++) cout&amp;lt;&amp;lt;a[i]&amp;lt;&amp;lt;&amp;#34;&amp;#34;; cout&amp;lt;&amp;lt;endl; //数组长度 cout &amp;lt;&amp;lt; sizeof(a)/sizeof(a[0]) &amp;lt;&amp;lt; endl; sort(a,a+10);//注意是加上数组长度 for(int i=0; i&amp;lt;10; i++) cout&amp;lt;&amp;lt;a[i]&amp;lt;&amp;lt;&amp;#34;&amp;#34;; return 0; } 2.桶排序 #include&amp;lt;iostream&amp;gt;#include&amp;lt;algorithm&amp;gt; using namespace std; int main() { int x, n; cin &amp;gt;&amp;gt; n; int a[100] = {0}; for (int i = 0; i &amp;lt; n; i++) { cin &amp;gt;&amp;gt; x; a[x]++; } for (int i = 0; i &amp;lt; 100; i++) { for (int m = 1; m &amp;lt;= a[i]; m++) { cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34;&amp;#34;; } } } 3.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;基础笔记(2)</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B02/</link>
      <pubDate>Tue, 14 Jan 2020 10:52:48 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B02/</guid>
      <description>c++模板 c++提供了函数模板(function template)所谓函数模板，实际上是建立一个通用函数，其函数类型和形参类型不具体制定，用一个虚拟的类型来代表。这个通用函数就成为函数模板。凡是函数体相同的函数都可以用这个模板代替，不必定义多个函数，只需在模板中定义一次即可。在调</description>
    </item>
    
    <item>
      <title>IDEA2019中文字体渲染问题</title>
      <link>https://CorPython.github.io/post/IDEA2019%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 11 Jan 2020 18:10:24 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/IDEA2019%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98/</guid>
      <description>IDEA 2018.2升级到 IDEA 2019.3,中文字体渲染问题 原文链接 解决方案 修改一下备用字体就可以 共需要修改两处： 1、Setting -&amp;gt; Editor -&amp;gt; Font 修改 Fallback font 为 simsun 2、Setting -&amp;gt; Editor -&amp;gt; Color Scheme -&amp;gt; Color Scheme Font 修改 Fallback font 为 simsun</description>
    </item>
    
    <item>
      <title>一道有趣的c语言习题</title>
      <link>https://CorPython.github.io/post/%E4%B8%80%E9%81%93%E6%9C%89%E8%B6%A3%E7%9A%84c%E8%AF%AD%E8%A8%80%E4%B9%A0%E9%A2%98/</link>
      <pubDate>Thu, 09 Jan 2020 21:37:59 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E4%B8%80%E9%81%93%E6%9C%89%E8%B6%A3%E7%9A%84c%E8%AF%AD%E8%A8%80%E4%B9%A0%E9%A2%98/</guid>
      <description>这道题来自于浙江大学翁恺老师的C语言程序设计CAP课程中的一道课堂测试题 题目: #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt; #define TOUPPER(c) (&amp;#39;a&amp;#39;&amp;lt;=(c)&amp;amp;&amp;amp;(c)&amp;lt;=&amp;#39;z&amp;#39;?(c)-&amp;#39;a&amp;#39;+&amp;#39;A&amp;#39;:(c)) int main(int argc, char const *argv[]) { char s[10]; strcpy(s, &amp;#34;abcd&amp;#34;); int i = 0; printf(&amp;#34;%c\n&amp;#34;,TOUPPER(s[++i])); return 0; } 输出结果是什么呢?我相信很多人猜的都是B,你也可以自己试着填一下答案,或者把我上面这个程序运行一下. 最终的答案是D! 那么过程是怎样的呢,我们在终端依次输</description>
    </item>
    
    <item>
      <title>查看自己的编译器支持的c&#43;&#43;标准</title>
      <link>https://CorPython.github.io/post/%E6%9F%A5%E7%9C%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BC%96%E8%AF%91%E5%99%A8%E6%94%AF%E6%8C%81%E7%9A%84c&#43;&#43;%E6%A0%87%E5%87%86/</link>
      <pubDate>Thu, 09 Jan 2020 19:28:20 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E6%9F%A5%E7%9C%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BC%96%E8%AF%91%E5%99%A8%E6%94%AF%E6%8C%81%E7%9A%84c&#43;&#43;%E6%A0%87%E5%87%86/</guid>
      <description>在自己的编译器中运行下面代码 #include &amp;lt;iostream&amp;gt;using namespace std; int main(int argc, char const *argv[]) { cout &amp;lt;&amp;lt; __cplusplus &amp;lt;&amp;lt; endl; return 0; } 我的编译器的运行结果是: 201402 下面是对应的c++标准的值: C ++ 98：__cplusplus是199711L。 C ++ 11：__cplusplus是201103L。 C ++ 14：__cplusplus是201402L。 C ++ 17：</description>
    </item>
    
    <item>
      <title>C语言宏定义</title>
      <link>https://CorPython.github.io/post/c%E8%AF%AD%E8%A8%80%E5%AE%8F%E5%AE%9A%E4%B9%89/</link>
      <pubDate>Thu, 09 Jan 2020 17:07:56 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c%E8%AF%AD%E8%A8%80%E5%AE%8F%E5%AE%9A%E4%B9%89/</guid>
      <description>c语言宏定义初识 带参数的宏的原则: 一切都要括号 整个值要括号 参数出现的每个地方都要括号 注意:结尾千万不要加上分号 #include&amp;lt;stdio.h&amp;gt;#include&amp;lt;stdlib.h&amp;gt; #define MAX( x, y ) ( ((x) &amp;gt; (y)) ? (x) : (y) )#define MIN( x, y ) ( ((x) &amp;lt; (y)) ? (x) : (y) )#define UPCASE( c ) ( ((c) &amp;gt;= &amp;#39;a&amp;#39; &amp;amp;&amp;amp; (c) &amp;lt;= &amp;#39;z&amp;#39;) ? ((c) - 0x20) : (c) )//大小写转换 #define Cube(x) ((x) * (x) * (x) )#define func(x) ((x) /3) #define PI 3.14//#undef PI 撤销宏定义 int main() { printf(&amp;#34;%.2f\n&amp;#34;,PI); printf(&amp;#34;%d\n&amp;#34;,MAX(15,20)); printf(&amp;#34;%.1f\n&amp;#34;,MAX(15.5,20.5)); printf(&amp;#34;%c\n&amp;#34;,UPCASE(&amp;#39;a&amp;#39;)); printf(&amp;#34;%c\n&amp;#34;,UPCASE(&amp;#39;b&amp;#39;)); printf(&amp;#34;%c\n&amp;#34;,UPCASE(&amp;#39;c&amp;#39;)); printf(&amp;#34;%c\n&amp;#34;,UPCASE(&amp;#39;D&amp;#39;)); printf(&amp;#34;%c\n&amp;#34;,UPCASE(&amp;#39;E&amp;#39;)); printf(&amp;#34;%d\n&amp;#34;,Cube(5));</description>
    </item>
    
    <item>
      <title>C&#43;&#43;面向对象程序设计</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 08 Jan 2020 11:53:35 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</guid>
      <description>类和对象 #include &amp;lt;iostream&amp;gt; using namespace std; class Box { public: double length; // 长度 double breadth; // 宽度 double height; // 高度 }; int main( ) { Box Box1; // 声明 Box1，类型为 Box Box Box2; // 声明 Box2，类型为 Box double volume = 0.0; // 用于存储体积 // box 1 详述 Box1.height = 5.0; Box1.length = 6.0; Box1.breadth = 7.0; // box 2 详述 Box2.height = 10.0; Box2.length = 12.0; Box2.breadth = 13.0; // box 1 的体积 volume = Box1.height * Box1.length * Box1.breadth; cout &amp;lt;&amp;lt; &amp;#34;Box1 的体积: &amp;#34; &amp;lt;&amp;lt; volume &amp;lt;&amp;lt; endl; // box 2 的体积 volume = Box2.height * Box2.length * Box2.breadth; cout &amp;lt;&amp;lt;</description>
    </item>
    
    <item>
      <title>Sublime Text搭建c/c&#43;&#43;编译运行环境</title>
      <link>https://CorPython.github.io/post/sumblime%E5%88%9B%E5%BB%BAc_c&#43;&#43;%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Tue, 07 Jan 2020 16:06:27 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/sumblime%E5%88%9B%E5%BB%BAc_c&#43;&#43;%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</guid>
      <description>前言 我配置的c/c++环境主要是为了写一些简单的算法或者小程序,看重的是Sublime Text 3的轻量,启动速度快,其次你必须先将自己的cmd设置为默认utf-8编码,这样做主要是为了防止一些编码问题,如果你习惯使用GBK编码,请不要看下面的配置 ! ! ! 设置cmd为默认UTF-8 使用快捷</description>
    </item>
    
    <item>
      <title>C&#43;&#43;编译错误</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 07 Jan 2020 15:50:02 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E7%AC%94%E8%AE%B0/</guid>
      <description>编译cpp文件时报错: ld.exe: can not open file ...xxx.exe:permission denied collect2.exe error ld returned 1 exit status 原因:代码当前目录（包括子目录）下有同名的.exe文件，会报此错误，只要把名字改一下就行了</description>
    </item>
    
    <item>
      <title>C&#43;&#43;基础笔记(1)</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sun, 05 Jan 2020 16:51:13 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E5%9F%BA%E7%A1%80/</guid>
      <description>输入输出 #include &amp;lt;iostream&amp;gt;using namespace std; //c++输入输出 int main() { string str = &amp;#34;hello world!&amp;#34;; int a; //endl有换行的功能 cout &amp;lt;&amp;lt; str &amp;lt;&amp;lt; endl; cin &amp;gt;&amp;gt; a; cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; cout &amp;lt;&amp;lt; a; return 0; } using namespace std ,它声明了命名空间 std,后续如果有未指定命名空间的符号,那么默认使用 std,这样就可以使用 cin,cout,vector 等。 cin 用于从控制台获取用户输入,cout 用于将数据输出到控制台 cin</description>
    </item>
    
    <item>
      <title>fatal: remote error: You can&#39;t push to git 解决办法</title>
      <link>https://CorPython.github.io/post/gitpush%E5%87%BA%E9%94%99/</link>
      <pubDate>Sun, 29 Dec 2019 17:27:01 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/gitpush%E5%87%BA%E9%94%99/</guid>
      <description>错误描述 fatal: remote error: You can&amp;#39;t push to git://github.com:CorPython/java_repo.git Use git@github.com:CorPython/java_repo.git 原因:如果在git clone的时候用的是git://github.com:xx/xxx.git的形式,那么就会出现这个问题 解决方案 输入下面的指令 git remote rm origin git remote add origin git@github.com:CorPython/java_repo.git git push origin 会出现下面的提示 输入上述的命令即可 git push --set-upstream origin master 成功上传!</description>
    </item>
    
    <item>
      <title>初探BFS,DFS</title>
      <link>https://CorPython.github.io/post/%E5%88%9D%E6%8E%A2BFSDFS/</link>
      <pubDate>Sat, 28 Dec 2019 21:43:51 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E5%88%9D%E6%8E%A2BFSDFS/</guid>
      <description>图结构 BFS BFS又称广度优先搜索,通常用队列的思想来实现 # 输出不同结点为起始点的BFS结果 def BFS(graph,s): queue = [] a = [] queue.append(s) seen = set() seen.add(s) while(len(queue) &amp;gt; 0): vertex = queue.pop(0) nodes = graph[vertex] for w in nodes: if w not in seen: queue.append(w) seen.add(w) if(vertex is not None): a.append(vertex) return a graph = { &amp;#34;A&amp;#34;: [&amp;#34;B&amp;#34;,&amp;#34;C&amp;#34;], &amp;#34;B&amp;#34;: [&amp;#34;A&amp;#34;,&amp;#34;C&amp;#34;,&amp;#34;D&amp;#34;], &amp;#34;C&amp;#34;: [&amp;#34;A&amp;#34;,&amp;#34;B&amp;#34;,&amp;#34;D&amp;#34;,&amp;#34;E&amp;#34;], &amp;#34;D&amp;#34;: [&amp;#34;B&amp;#34;,&amp;#34;C&amp;#34;,&amp;#34;E&amp;#34;,&amp;#34;F&amp;#34;], &amp;#34;E&amp;#34;: [&amp;#34;C&amp;#34;,&amp;#34;D&amp;#34;], &amp;#34;F&amp;#34;: [&amp;#34;D&amp;#34;] } array = [&amp;#34;A&amp;#34;,&amp;#34;B&amp;#34;,&amp;#34;C&amp;#34;,&amp;#34;D&amp;#34;,&amp;#34;E&amp;#34;,&amp;#34;F&amp;#34;] for w in array: print(BFS(graph,w)) 运行结果: $ python -u &amp;#34;d:\python\BFS.py&amp;#34; [&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;F&amp;#39;] [&amp;#39;B&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;F&amp;#39;] [&amp;#39;C&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;F&amp;#39;] [&amp;#39;D&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;F&amp;#39;,</description>
    </item>
    
    <item>
      <title>八皇后问题</title>
      <link>https://CorPython.github.io/post/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 28 Dec 2019 21:42:24 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title>java线程基础</title>
      <link>https://CorPython.github.io/post/java%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 28 Dec 2019 20:10:15 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/java%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</guid>
      <description>学习视频 java多线程的不可见性 假设现在有一个布尔型变量a=true,后面将其修改为false,随后输出这个值,显而易见应该为false,现在在主函数中建立一个线程读取变量a的值,那a的值能否读到false呢? 现在来写一下这个代码 public class test { static boolean a = true; public static void main(String[] args) throws InterruptedException { new Thread(() -&amp;gt; { //a为</description>
    </item>
    
    <item>
      <title>C语言排序</title>
      <link>https://CorPython.github.io/post/c%E8%AF%AD%E8%A8%80%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Wed, 25 Dec 2019 21:53:10 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c%E8%AF%AD%E8%A8%80%E6%8E%92%E5%BA%8F/</guid>
      <description>#include&amp;lt;stdio.h&amp;gt;#include&amp;lt;stdlib.h&amp;gt;#include&amp;lt;string.h&amp;gt; #define MAXSIZE 100typedef struct { int key; }record; typedef struct { record r[MAXSIZE+1]; int length; }Sqlist; void Initsqlist(Sqlist &amp;amp;L)/*初始化线性表*/ { int i; printf(&amp;#34;请输入你要排序的数字的个数:\n&amp;#34;); scanf(&amp;#34;%d&amp;#34;,&amp;amp;L.length); printf(&amp;#34;请输入你的数据:\n&amp;#34;); for(i=1;i&amp;lt;=L.length;i++) scanf(&amp;#34;%d&amp;#34;,&amp;amp;L.r[i].key); } void InsertSort(Sqlist &amp;amp;L)/*书上的直接插入排序*/ { int i,j; for(i=2;i&amp;lt;=L.length;i++) { if(L.r</description>
    </item>
    
    <item>
      <title>IAR快捷键</title>
      <link>https://CorPython.github.io/post/IAR%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Tue, 24 Dec 2019 13:05:52 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/IAR%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>帮助文档：F1 Make：F7 跳转到定义：F4 全速运行：F5 单步运行：F10 添加断点：F9 使能/使能断点：Ctrl+F9 烧录程序：Ctrl + D 注释多行：Ctrl+K（单行也是这个） 取消注释：Ctrl+Shfit+K 烧录程序：Ctrl+D（进入调试程序） 退出调试：Ctrl+Shift</description>
    </item>
    
    <item>
      <title>git操作笔记</title>
      <link>https://CorPython.github.io/post/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 23 Dec 2019 14:19:00 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>github及git版本控制 git基本操作 1.创建一个版本库 新建一个目录git_test,在git_test目录下创建一个版本库 git init 2.在git_test下创建一个新文件code.txt vi code.txt#创建一个新文件 cat code.txt#查看文件中的内容 3.新建一个文件版本（比</description>
    </item>
    
    <item>
      <title>vscode如何写latex</title>
      <link>https://CorPython.github.io/post/vscode%E7%BC%96%E5%86%99latex/</link>
      <pubDate>Fri, 20 Dec 2019 18:25:21 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vscode%E7%BC%96%E5%86%99latex/</guid>
      <description>介绍 以下介绍摘自百度百科,链接:https://baike.baidu.com/item/LaTeX/1212106?fr=aladdin LaTeX（LATEX，音译“拉泰赫”）是一种基于ΤΕΧ的排版系统，由美国计算机学家莱斯利·兰伯特（Leslie Lamport）在20世纪80</description>
    </item>
    
    <item>
      <title>windows下载安装latex</title>
      <link>https://CorPython.github.io/post/windows%E5%AE%89%E8%A3%85latex/</link>
      <pubDate>Thu, 19 Dec 2019 21:19:37 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/windows%E5%AE%89%E8%A3%85latex/</guid>
      <description>下载方式 1.官网下载 下载地址 2.清华大学官方镜像站下载(推荐) 下载地址 2.安装 下载完成后,打开iso文件,点击下图箭头文件 点击修改更换路径,再点击advanced 修改一些选项 点击安装,等待安装完成即可 ! ! ! 3.验证安装是否成功 打开powershell或者cmd输入下列命令 xelatex -v 出现</description>
    </item>
    
    <item>
      <title>Sql server触发器及存储过程</title>
      <link>https://CorPython.github.io/post/sqlserver%E8%A7%A6%E5%8F%91%E5%99%A8/</link>
      <pubDate>Tue, 10 Dec 2019 20:35:22 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/sqlserver%E8%A7%A6%E5%8F%91%E5%99%A8/</guid>
      <description>SQL server触发器及存储过程 删除触发器 /*1.在表Student中建立删除触发器，实现表Student和表SC的级联删除，也就是只要删除表Student 中的元组学号为s1，则表SC中SNO为s1的元组也要删除；建立触发器后用企业管理器删除Student中学号为30的元组，看看表</description>
    </item>
    
    <item>
      <title>maven配置</title>
      <link>https://CorPython.github.io/post/maven%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 08 Dec 2019 11:56:45 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/maven%E9%85%8D%E7%BD%AE/</guid>
      <description>&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt; &amp;lt;!--Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the &amp;#34;License&amp;#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &amp;#34;AS IS&amp;#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --&amp;gt; &amp;lt;!--| This is the configuration file for Maven. It can be specified at two levels: | | 1. User Level. This settings.xml file</description>
    </item>
    
    <item>
      <title>hugo添加音乐功能</title>
      <link>https://CorPython.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Thu, 05 Dec 2019 20:42:50 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD/</guid>
      <description>前言 最近参考很多博客的搭建过程,发现他们的博客都有这个音乐功能.我想着有人在访问你的博客有音乐听听好像也不错(其实就是想把博客功能做好一点).有了这个想法之后,我谷歌了很多方法,也从很多博客找简单一点的实现方法,毕竟本人没有学过html和js,所以很多教程都无法复现他们的操作,导</description>
    </item>
    
    <item>
      <title>IDEA常用快捷键</title>
      <link>https://CorPython.github.io/post/IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Wed, 04 Dec 2019 20:46:09 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>IDEA常用快捷键 1.返回上一次查看代码的位置 ctrl + alt + 左键 2.代码格式化快捷键 ctrl + alt + F 3.查看最近打开的文件 ctrl + E 4.查看最近修改的文件 ctrl + shift + E 5.查看当前文件的结构 ctrl + F12 6.语句完成 ctrl + shift + enter 7.可以生成构造器/Getter/Setter/toString Alt + Insert 8.导入包,</description>
    </item>
    
    <item>
      <title>工具推荐</title>
      <link>https://CorPython.github.io/tool/</link>
      <pubDate>Fri, 29 Nov 2019 18:00:17 +0800</pubDate>
      
      <guid>https://CorPython.github.io/tool/</guid>
      <description>暂时没有更新</description>
    </item>
    
    <item>
      <title>Hugo使用本地的图片</title>
      <link>https://CorPython.github.io/post/hugo%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E7%9A%84%E5%9B%BE%E7%89%87/</link>
      <pubDate>Thu, 28 Nov 2019 22:15:53 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E7%9A%84%E5%9B%BE%E7%89%87/</guid>
      <description>前言 ​ 上次出了一篇关于搭建github图床的教程,里面也谈到了我当时并没有找到或者说实现本地图片在博客中使用的方法.由于本人的强迫症.于是我又不断的去找资料,终于在一个视频中找到了在hugo使用本地的图片的方法,我猜新手也不愿意自己搭建图床,所以请接着看下面的方法吧! 使用方法 首先</description>
    </item>
    
    <item>
      <title>GitHub&#43;jsDelivr&#43;PicGo打造稳定快速高效图床</title>
      <link>https://CorPython.github.io/post/GitHub&#43;jsDelivr&#43;PicGo%E6%89%93%E9%80%A0%E7%A8%B3%E5%AE%9A%E5%BF%AB%E9%80%9F%E9%AB%98%E6%95%88%E5%9B%BE%E5%BA%8A/</link>
      <pubDate>Wed, 27 Nov 2019 20:06:38 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/GitHub&#43;jsDelivr&#43;PicGo%E6%89%93%E9%80%A0%E7%A8%B3%E5%AE%9A%E5%BF%AB%E9%80%9F%E9%AB%98%E6%95%88%E5%9B%BE%E5%BA%8A/</guid>
      <description>前言 用hugo写博客可能图片是比较重要的一环吧.本来时指望在博客中使用本地的图片,但是由于自己的能力有限,并且看了一些大神都不推荐使用本地图片.推荐使用图床来管理自己的博客图片. 常见的免费图床建议参考这篇文章:盘点一下免费好用的图床 但是,今天不是介绍免费图床的使用,这次主要是介绍</description>
    </item>
    
    <item>
      <title>WireShark找不到接口或者网卡</title>
      <link>https://CorPython.github.io/post/WireShark%E6%89%BE%E4%B8%8D%E5%88%B0%E6%8E%A5%E5%8F%A3%E6%88%96%E8%80%85%E7%BD%91%E5%8D%A1/</link>
      <pubDate>Tue, 19 Nov 2019 22:19:14 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/WireShark%E6%89%BE%E4%B8%8D%E5%88%B0%E6%8E%A5%E5%8F%A3%E6%88%96%E8%80%85%E7%BD%91%E5%8D%A1/</guid>
      <description>wireshark是一款win10上的抓包软件.详情请点击官网 安装过程就不再赘述,请自己百度 百度的解释为: Wireshark（前称Ethereal）是一个网络封包分析软件。网络封包分析软件的功能是撷取网络封包，并尽可能显示出最为详细的网络封包资料。Wireshark使用WinPC</description>
    </item>
    
    <item>
      <title>hugo添加博客字数统计功能</title>
      <link>https://CorPython.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E5%8D%9A%E5%AE%A2%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Fri, 15 Nov 2019 13:31:15 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E5%8D%9A%E5%AE%A2%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD/</guid>
      <description>1.在自己的博客的文章中找到你想将字数多少显示的具体位置,假如我想将它放在阅读数的后面,先定位到阅读数的源代码位置,找到对应的class位置. 2.在自己主题的single.html的配置中搜索第一步中的class的位置,并在{{ end }}后面添加一下代码,比如我的主题对应的singl</description>
    </item>
    
    <item>
      <title>hugo如何将文章置顶</title>
      <link>https://CorPython.github.io/post/hugo%E5%A6%82%E4%BD%95%E5%B0%86%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/</link>
      <pubDate>Fri, 15 Nov 2019 13:04:44 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo%E5%A6%82%E4%BD%95%E5%B0%86%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/</guid>
      <description>在创建的博客或者写过的博客的Front matter中添加下列字段 weight:1</description>
    </item>
    
    <item>
      <title>git clone出错</title>
      <link>https://CorPython.github.io/post/gitcloneerror/</link>
      <pubDate>Thu, 14 Nov 2019 20:39:01 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/gitcloneerror/</guid>
      <description>问题如下图: 输入命令,修改https方式下载改为使用ssh下载方式 git config --global url.git：//github.com/.insteadOf https://github.com/</description>
    </item>
    
    <item>
      <title>Vim代码自动补全</title>
      <link>https://CorPython.github.io/post/vim%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/</link>
      <pubDate>Thu, 14 Nov 2019 12:36:58 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vim%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/</guid>
      <description>vim自带的代码补全快捷键 ctrl + N</description>
    </item>
    
    <item>
      <title>Github同步fork的项目</title>
      <link>https://CorPython.github.io/post/github%E5%90%8C%E6%AD%A5fork%E7%9A%84%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Wed, 13 Nov 2019 18:30:44 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/github%E5%90%8C%E6%AD%A5fork%E7%9A%84%E9%A1%B9%E7%9B%AE/</guid>
      <description>给出两种方法 1.使用git指令进行更新 git remote -v git remote add upstream git@github.com:xxx/xxx.git git fetch upstream git merge upstream/master 2.在Github Desktop上更新</description>
    </item>
    
    <item>
      <title>Vim如何安装插件</title>
      <link>https://CorPython.github.io/post/vim%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Wed, 13 Nov 2019 16:54:24 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vim%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/</guid>
      <description>vim 安装插件 vim在linux下的配置文件的地址有以下两z种方法 vim /home/用户名/.vimrc(比如vim /home/zhangfp/.vimrc) 或者 vim ~/.vimrc linux下安装插件管理器vim_plug curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 将以下信息写入.vimrc中 &amp;quot; Specify a directory for plugins &amp;quot; - For Neovim: stdpath(&#39;data&#39;) . &#39;/plugged&#39; &amp;quot; - Avoid using standard Vim directory names like &#39;plugin&#39; call plug#begin(&#39;~/.vim/plugged&#39;) &amp;quot; Make sure you use single quotes &amp;quot; Shorthand notation; fetches https://github.com/junegunn/vim-easy-align Plug &#39;junegunn/vim-easy-align&#39; &amp;quot;</description>
    </item>
    
    <item>
      <title>Pacman包管理命令</title>
      <link>https://CorPython.github.io/post/pacman%E5%8C%85%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 13 Nov 2019 16:51:48 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/pacman%E5%8C%85%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</guid>
      <description>Pacman指令 1.安装软件 sudo pacman -S 软件名 2.更新软件源并更新你的软件 sudo pacman -Syu 3.查询软件 sudo pacman -Ss 软件名 4.请理已安装的软件的缓存(安装包) sudo pacman -Sc 5.删除某个软件 只删除安装包 sudo pacman -R 软件名 删除安装包及其依赖 sudo pacman -Rs 软件名 在上面的基础上删除该软件的全局配置(推荐) sudo pacman -Rns 软件名 6.查询本地已经</description>
    </item>
    
    <item>
      <title>hugo限制摘要字数显示</title>
      <link>https://CorPython.github.io/post/hugo%E9%99%90%E5%88%B6%E6%91%98%E8%A6%81%E5%AD%97%E6%95%B0%E6%98%BE%E7%A4%BA/</link>
      <pubDate>Wed, 13 Nov 2019 16:09:51 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo%E9%99%90%E5%88%B6%E6%91%98%E8%A6%81%E5%AD%97%E6%95%B0%E6%98%BE%E7%A4%BA/</guid>
      <description>在首页显示博客时,我们通常不希望将所有的内容显示出来,只希望显示部分内容.我们通常会在config.toml中设定摘要的字数 summaryLength = 180 但是,只在配置文件中这样设置是没有效果的!!!!我们需要在每一篇博客的开头加上这样一句 isCJKLanguage: true 为了避免每次写博客时手动添加,我们可以将这一句写入模板中,打</description>
    </item>
    
    <item>
      <title>Matlab学习笔记</title>
      <link>https://CorPython.github.io/post/matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 13 Nov 2019 16:05:31 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>绘图 添加标签，标题，生成网格线，美化图形 x = [0:0.01:10]; y = sin(x); plot(x, y), xlabel(&amp;#39;x&amp;#39;), ylabel(&amp;#39;Sin(x)&amp;#39;), title(&amp;#39;Sin(x) Graph&amp;#39;), grid on,axis equal#添加网格线和美化图形 绘制多个函数 x = [0 : 0.01: 10]; y = sin(x); g = cos(x); plot(x, y, x, g, &amp;#39;.-&amp;#39;), legend(&amp;#39;Sin(x)&amp;#39;, &amp;#39;Cos(x)&amp;#39;) 绘制多个图象 plot(x,y,x,g) #等价于 plot(x,y) hold all#保留上次绘图并添加新的绘图 plot(x,g) 设置坐标轴的刻度范围 axis([xmin xmax ymin ymax]) axis([xmin xmax ymin ymax zmin zmax cmin cmax]); % 设置x，y，z轴的范围</description>
    </item>
    
    <item>
      <title>解决vscode终端中文乱码</title>
      <link>https://CorPython.github.io/post/vscode%E7%BB%88%E7%AB%AF%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</link>
      <pubDate>Mon, 11 Nov 2019 20:40:54 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vscode%E7%BB%88%E7%AB%AF%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</guid>
      <description>解决vscode终端中文乱码 1.查看cmd窗口编码，GBK的编码为936，cmd的默认编码为GBK,而很多编译器的默认编码为UTF-8，所以中文会出现乱码，比如vscode下默认编码为UTF-8 使用chcp查看cmd的编码，如果不是UTF-8，可以使用chcp 65001这个命令 2</description>
    </item>
    
    <item>
      <title>hugo博客如何使用gittalk</title>
      <link>https://CorPython.github.io/post/hugo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8gittalk%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 11 Nov 2019 18:59:30 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8gittalk%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</guid>
      <description>1.进入github官方网站,登陆自己的github-&amp;gt;settings-&amp;gt;Devloper settings-&amp;gt;Github Apps会出现下图 Application name:给应用起个名字,根据自己的想法 Homepage:写你的博客地址 Application description:为你的应用写一段描述 Application callback URL:回调地址,可以写你的博客</description>
    </item>
    
    <item>
      <title>解决git远程和本地分支不同步</title>
      <link>https://CorPython.github.io/post/%E4%BF%AE%E5%A4%8Dgitpush%E5%88%B0github%E5%87%BA%E9%94%99%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 11 Nov 2019 18:46:33 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E4%BF%AE%E5%A4%8Dgitpush%E5%88%B0github%E5%87%BA%E9%94%99%E9%97%AE%E9%A2%98/</guid>
      <description>error: failed to push some refs to &amp;lsquo;git@github.com:xxx. git&amp;rsquo; 当执行了git push -u origin master时,有时候会出现下图中的错误,主要时本地的代码和远程代码仓库的代码出现了冲突,需要同步远程的master 分支 要解决上述的冲突很简单,只需要下面两条指令即可完成 git pull origin master git push -u origin master</description>
    </item>
    
    <item>
      <title>Gittalk报错Error: Validation Failed</title>
      <link>https://CorPython.github.io/post/gittalk%E5%87%BA%E9%94%99%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Mon, 11 Nov 2019 18:14:21 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/gittalk%E5%87%BA%E9%94%99%E8%A7%A3%E5%86%B3/</guid>
      <description>gittalk 是一个基于 Github Issue 和 Preact 开发的评论插件。它除了支持 Hexo 外，还支持 java，php 等语言开发的博客,当然我现在使用的hugo博客也是支持的.详情请点击gittalk官网 但是如果标题的字节过长(建议标题起短一些),会出现ERROR:Validation Failed这个错误 解决方案 1.找到配</description>
    </item>
    
    <item>
      <title>windows连接mongodb数据库</title>
      <link>https://CorPython.github.io/post/windows%E8%BF%9E%E6%8E%A5mongodb%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Sun, 10 Nov 2019 20:30:14 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/windows%E8%BF%9E%E6%8E%A5mongodb%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>1.打开git-bash或者其他命令行工具,输入下列命令 mongod --dbpath /d/MongoDB/Server/4.0/data/db //dbpath后面是mongodb数据库的绝对路径 2.打开mongodb compass数据库管理软件,连接数据库 3.连接成功</description>
    </item>
    
    <item>
      <title>Windows大量软件安装后乱码解决</title>
      <link>https://CorPython.github.io/post/windows%E5%A4%A7%E9%87%8F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%90%8E%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Fri, 08 Nov 2019 20:46:48 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/windows%E5%A4%A7%E9%87%8F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%90%8E%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</guid>
      <description>写在前面 你是不是经常遇到windows软件安装后输入窗口输入中文全是乱码或者中文根本不能输入,本人也曾经遇到过这种问题,曾经使用的Dev C++5.11就出现过这种情况,虽然环境改成了中文却全是乱码,搜遍全网,也没有找到结果,就在不久前,我终于知道了问题的解决办法,请根据下列步骤进</description>
    </item>
    
    <item>
      <title>vscode配置文档</title>
      <link>https://CorPython.github.io/post/vscode%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 07 Nov 2019 20:32:46 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vscode%E9%85%8D%E7%BD%AE/</guid>
      <description>vscode作为一个优秀的编辑器,以轻度,高效,美观著名.但是配置c语言确实对新手很不友好.所以我这里保存了最新版的vscode的c/c++配置文件 使用者只要直接在.vscode 文件夹下建立launch.json和tasks.json配置文件即可 注意:在所有的mingw64的位置</description>
    </item>
    
    <item>
      <title>hugo发布博客流程</title>
      <link>https://CorPython.github.io/post/hugo%E6%8F%90%E4%BA%A4%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 07 Nov 2019 19:54:17 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo%E6%8F%90%E4%BA%A4%E5%8D%9A%E5%AE%A2/</guid>
      <description>在博客根目录下运行下面命令,并在post目录下生成markdown博客文件 hugo new post/xxxx.md 在博客根目录下运行下面命令 hugo //将本地文件重新编译 hugo server//在本地生成 注意,可以在本地查看博客变化,等自己觉得合适了就可以使用下面命令提交到github 在hugo本地的public目录下使用如</description>
    </item>
    
    <item>
      <title>github基本操作</title>
      <link>https://CorPython.github.io/post/github%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Thu, 07 Nov 2019 19:23:28 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/github%E7%9B%B8%E5%85%B3/</guid>
      <description>1.创建一个新仓库repo mkdir repo//创建一个新文件夹 cd repo//进入这个文件夹 git init//初始化这个仓库 ll .git/.git文件中的相关信息 .git文件中的信息有以下 config 文件包含了项目特有的配置选项 description仓库的描述 HEAD 文件指向当前分支 hooks 目录保存了客户端或服务端</description>
    </item>
    
    <item>
      <title>linux编译c/c&#43;&#43;命令</title>
      <link>https://CorPython.github.io/post/linux%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 07 Nov 2019 19:23:28 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/linux%E5%91%BD%E4%BB%A4/</guid>
      <description>linux下g++编译运行c++ g++ -std=c++11 -o test test.cpp(在c++11标准下编译) ./test linux下gcc编译c语言 gcc -o test test.c ./test linux基本命令 cd 或者cd ~ 返回用户工作目录 ls cd - 返回上一个访问的目录 mkdir 文件夹名 创建文件夹 cd ..// 返回上一级目录 cd ../.. 返回上两级目录,以此类推 pwd 打印当前路径 export //</description>
    </item>
    
    <item>
      <title>vim基础操作</title>
      <link>https://CorPython.github.io/post/vim%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 07 Nov 2019 19:23:28 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vim%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/</guid>
      <description>vim指令 基础命令 h上 j下 k 上 l右 b:回退 p:粘贴 y:复制 u:撤消 d:剪切 i:进入insert模式 a:在当前光标后进入insert模式 o:在当前光标的下一行进入insert模式 c:剪切并进入insert模式 v：直接进入可视化visual模式 V：选择光标所在行并进入visual模式</description>
    </item>
    
    <item>
      <title>Vscode快捷键</title>
      <link>https://CorPython.github.io/post/vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Thu, 07 Nov 2019 19:23:28 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>vscode vs code 的常用快捷键 1、注释： a) 单行注释：[ctrl+k,ctrl+c] 或 ctrl+/ b) 取消单行注释：[ctrl+k,ctrl+u] (按下ctrl不放，再按k + u) c) 多行注释：[alt+shift+A] d) 多行注释：/** 2、移动行：alt+up/down，选中按TAB右移，按SHIFT+TAB</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://CorPython.github.io/about/</link>
      <pubDate>Thu, 07 Nov 2019 19:23:28 +0800</pubDate>
      
      <guid>https://CorPython.github.io/about/</guid>
      <description>关于本站 建立时间: 2019/11/07 关于本人 懒得写,没啥好写的 联系方式</description>
    </item>
    
    <item>
      <title>leetcode</title>
      <link>https://CorPython.github.io/leetcode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://CorPython.github.io/leetcode/</guid>
      <description>leetcode刷题汇总 leetcode229 [众数] (投票法/暴力破解)
解题链接:点这里</description>
    </item>
    
    <item>
      <title>书单</title>
      <link>https://CorPython.github.io/books/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://CorPython.github.io/books/</guid>
      <description>C语言  c primer plus第六版 c和指针 c陷阱缺陷  c++  c++ priper plus C++Primer  java  Java核心技术卷一 java核心技术卷二 java编程思想(难)  python  Python编程从入门到实战 Python核心编程 流畅的python  go  Go语言实战  javaEE  Spring实战 Spring Boot实战 Spring技术内幕(源码分析)  数据库   MySQL必知必会
  高性能MySQL
  linux  鸟哥的Linux私房菜 基础学习篇第四版 Unix环境高级编程  计算机网络  TCP/IP详解 计算机网络 自顶向下方法  算法  啊哈算法 算法第四版  代码质量  重构 改善既有代码的设计  </description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://CorPython.github.io/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://CorPython.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://CorPython.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://CorPython.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>