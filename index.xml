<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code show的博客</title>
    <link>https://CorPython.github.io/</link>
    <description>Recent content on code show的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Nov 2019 09:54:11 +0800</lastBuildDate>
    
	<atom:link href="https://CorPython.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>连接Mongodb数据库</title>
      <link>https://CorPython.github.io/post/%E8%BF%9E%E6%8E%A5Mongodb%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Sat, 09 Nov 2019 09:54:11 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E8%BF%9E%E6%8E%A5Mongodb%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description> 1.打开git-bash或者其他命令行工具,输入下列命令 mongod --dbpath /d/MongoDB/Server/4.0/data/db //dbpath后面是mongodb数据库的绝对路径  2.打开mongodb compass数据库管理软件,连接数据库 3.连接成功 </description>
    </item>
    
    <item>
      <title>Windows大量软件安装后乱码解决</title>
      <link>https://CorPython.github.io/post/windows%E5%A4%A7%E9%87%8F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%90%8E%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Fri, 08 Nov 2019 20:46:48 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/windows%E5%A4%A7%E9%87%8F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%90%8E%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</guid>
      <description> 写在前面 你是不是经常遇到windows软件安装后输入窗口输入中文全是乱码或者中文根本不能输入,本人也曾经遇到过这种问题,曾经使用的Dev C++5.11就出现过这种情况,虽然环境改成了中文却全是乱码,搜遍全网,也没有找到结果,就在不久前,我终于知道了问题的解决办法,请根据下列步骤进行修复,
以win10系统为例 1.在设置中选择时间和语言 2.选择区域 3.选择其他设置 4.选择区域 5.注意这里是不是中文简体 ![i6.最重要的一步,一定要取消utf-8的勾选(极其重要) 我就是这里勾选了Beta版导致很多软件中文乱码,甚至不能使用,切记!!! </description>
    </item>
    
    <item>
      <title>vscode配置文档</title>
      <link>https://CorPython.github.io/post/vscode%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 07 Nov 2019 20:32:46 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vscode%E9%85%8D%E7%BD%AE/</guid>
      <description>vscode作为一个优秀的编辑器,以轻度,高效,美观著名.但是配置c语言确实对新手很不友好.所以我这里保存了最新版的vscode的c/c++配置文件
使用者只要直接在.vscode 文件夹下建立launch.json和tasks.json配置文件即可
注意:在所有的mingw64的位置改为自己电脑上的配置 launch.json { &amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;, &amp;quot;configurations&amp;quot;: [ { // 配置 VS Code 调试行为： &amp;quot;name&amp;quot;: &amp;quot;c/c++&amp;quot;, // 设置在启动配置下拉菜单中显示调试配置的名称。 &amp;quot;preLaunchTask&amp;quot;: &amp;quot;Compile&amp;quot;, // 调试会话开始前要运行的任务。 &amp;quot;type&amp;quot;: &amp;quot;cppdbg&amp;quot;, // 设置要使用的基础调试器。使用 GDB 或 LLDB 时必须是 cppdbg 。 &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;, // 设置启动程序还是附加到已经运行的实例。启动或附加 ( launch | attach ). &amp;quot;program&amp;quot;: &amp;quot;${fileDirname}/${fileBasenameNoExtension}.exe&amp;quot;, // 调试器将启动或附加的可执行文件的完整路径。 &amp;quot;externalConsole&amp;quot;: false, // 设置是否显示外部控制台。 // 配置目标应用程序： &amp;quot;args&amp;quot;: [], // 设置调试时传递给程序的命令行参数。 &amp;quot;cwd&amp;quot;: &amp;quot;${workspaceFolder}&amp;quot;, // 设置调试器启动的应用程序的工作目录。 &amp;quot;environment&amp;quot;: [], // 设置调试时添加到程序环境中的环境变量，例如: [ { &amp;quot;name&amp;quot;: &amp;quot;squid&amp;quot;, &amp;quot;value&amp;quot;: &amp;quot;clam&amp;quot; } ]。 // 自定义 GDB 或者 LLDB： &amp;quot;windows&amp;quot;: { &amp;quot;MIMode&amp;quot;: &amp;quot;gdb&amp;quot;, // 指定 VS Code 连接的调试器，必须为 gdb 或者 lldb。 &amp;quot;miDebuggerPath&amp;quot;: &amp;quot;D:/mingw64/mingw64/bin/gdb.</description>
    </item>
    
    <item>
      <title>Hugo提交博客及推送到github的流程</title>
      <link>https://CorPython.github.io/post/hugo%E6%8F%90%E4%BA%A4%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 07 Nov 2019 19:54:17 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo%E6%8F%90%E4%BA%A4%E5%8D%9A%E5%AE%A2/</guid>
      <description>在博客根目录下运行下面命令,并在post目录下生成markdown博客文件
hugo new post/xxxx.md  在博客根目录下运行下面命令
hugo //将本地文件重新编译 hugo server//在本地生成  注意,可以在本地查看博客变化,等自己觉得合适了就可以使用下面命令提交到github
在hugo本地的public目录下使用如下命令
git add -A //将修改的文件提交到缓冲区 git commit -m &#39;提交说明&#39; git push -u origin master //推送到远端仓库主分支上  </description>
    </item>
    
    <item>
      <title>GitHub相关</title>
      <link>https://CorPython.github.io/post/github%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Thu, 07 Nov 2019 19:23:28 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/github%E7%9B%B8%E5%85%B3/</guid>
      <description>1.创建一个新仓库repo mkdir repo//创建一个新文件夹 cd repo//进入这个文件夹 git init//初始化这个仓库 ll .git/.git文件中的相关信息  .git文件中的信息有以下  config 文件包含了项目特有的配置选项 description仓库的描述 HEAD 文件指向当前分支 hooks 目录保存了客户端或服务端钩子脚本。 info 目录保存了一份不希望在 .gitignore 文件中管理的忽略模式 (ignored patterns) 的全局可执行文件 objects 目录存储所有数据内容 refs 目录存储指向数据 (分支) 的提交对象的指针,里面即有stash栈指针以及tag等  2.在文件夹中新建一个文件README.md vim README.md cat README.md  3.连接GitHub 本地仓库与远程仓库的传输是通过SSH加密的，首先创建SSK KEY mkdir .ssh//创建一个文件夹.ssh cd .ssh/ ssh-keygen -t rsa -C &amp;quot;1337425156zhang@gmail.</description>
    </item>
    
    <item>
      <title>linux编译c/c&#43;&#43;命令</title>
      <link>https://CorPython.github.io/post/linux%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 07 Nov 2019 19:23:28 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/linux%E5%91%BD%E4%BB%A4/</guid>
      <description> linux下g++编译运行c++ g++ -std=c++11 -o test test.cpp(在c++11标准下编译) ./test  linux下gcc编译c语言 gcc -o test test.c ./test  </description>
    </item>
    
    <item>
      <title>vim基本操作及pacman常见指令</title>
      <link>https://CorPython.github.io/post/vim%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 07 Nov 2019 19:23:28 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vim%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/</guid>
      <description>vim指令 基础命令 h上 j下 k 上 l右
b:回退
p:粘贴
y:复制
u:撤消
d:剪切
i:进入insert模式
a:在当前光标后进入insert模式
o:在当前光标的下一行进入insert模式
c:剪切并进入insert模式
v：直接进入可视化visual模式
V：选择光标所在行并进入visual模式
ctrl + v：可以进入visual模式，选择一个长方形块进行操作
w:保存
q:退出
/：使用 /+你要搜索的字符快速定位
常用指令 1.按住{跳转到下一个段落
2.按住}跳转到上一个段落
3.按住%跳转到[]或者{}两边
4.要使vim中文不乱码，在配置文件vimrc中添加
set fileencodings=utf-8,ucs-bom,cp936,big5 set fileencoding=utf-8  5.先按d跳转到再按数字键再按方向键往哪个方向剪切几个字符
比如d5-&amp;gt; 表示向右删除5个字符
6.按两下d或者c剪切一行
7.按p粘贴内容
8.组合键cw删除字符并进入insert模式
9.撤销操作：按esc退出进入command模式，按u撤销前一个操作
10.剪切操作：在command模式下按v进入visual模式，按上下选中多行，按c或者d剪切
11.粘贴操作：按command模式下按p粘贴剪切的内容
12.vim中的左下上右代表的键还有H J K L
13.另存为：wq + 文件名.</description>
    </item>
    
    <item>
      <title>Vscode快捷键</title>
      <link>https://CorPython.github.io/post/vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Thu, 07 Nov 2019 19:23:28 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>vscode  vs code 的常用快捷键
  1、注释：
　a) 单行注释：[ctrl+k,ctrl+c] 或 ctrl+/
　b) 取消单行注释：ctrl+k,ctrl+u
　c) 多行注释：[alt+shift+A]
　d) 多行注释：/**
  2、移动行：alt+up/down，选中按TAB右移，按SHIFT+TAB左移
3、显示/隐藏左侧目录栏 ctrl + b
4、复制当前行：shift + alt +up/down
5、删除当前行：shift + ctrl + k
6、控制台终端显示与隐藏：ctrl + ~
7、查找文件/安装vs code 插件地址：ctrl + p
  8、代码格式化：shift + alt +f</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://CorPython.github.io/about/</link>
      <pubDate>Thu, 07 Nov 2019 19:23:28 +0800</pubDate>
      
      <guid>https://CorPython.github.io/about/</guid>
      <description> 这个人很懒,还不想写介绍 这个人很懒,还不想写介绍 这个人很懒,还不想写介绍 这个人很懒,还不想写介绍 </description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://CorPython.github.io/archives/</link>
      <pubDate>Thu, 07 Nov 2019 19:23:28 +0800</pubDate>
      
      <guid>https://CorPython.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>最近动态</title>
      <link>https://CorPython.github.io/new/</link>
      <pubDate>Thu, 07 Nov 2019 19:23:28 +0800</pubDate>
      
      <guid>https://CorPython.github.io/new/</guid>
      <description> 暂时没有写内容,敬请期待 暂时没有写内容,敬请期待 暂时没有写内容,敬请期待 </description>
    </item>
    
  </channel>
</rss>