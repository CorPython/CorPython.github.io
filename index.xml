<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code show的博客</title>
    <link>https://CorPython.github.io/</link>
    <description>Recent content on code show的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Nov 2019 19:23:28 +0800</lastBuildDate>
    
	<atom:link href="https://CorPython.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Test</title>
      <link>https://CorPython.github.io/post/test/</link>
      <pubDate>Wed, 04 Mar 2020 17:50:58 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/test/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Leecode面试金典1-4</title>
      <link>https://CorPython.github.io/post/leecode%E9%9D%A2%E8%AF%95%E9%87%91%E5%85%B81-4/</link>
      <pubDate>Wed, 04 Mar 2020 17:23:34 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/leecode%E9%9D%A2%E8%AF%95%E9%87%91%E5%85%B81-4/</guid>
      <description>1.判定字符是否唯一 题目 实现一个算法，确定一个字符串 s 的所有字符是否全都不同。 示例 1： 输入: s = &amp;quot;leetcode&amp;quot; 输出: false 示例 2： 输入: s = &amp;quot;abc&amp;quot; 输出: true 限制： 0 &amp;lt;= len(s) &amp;lt;= 100 如果你不使用额外的数据结构，会很加分。 题解 1.对字符串排序,比较相邻字符是否相同 bool isUnique(string astr) { if (astr.size() == 0) return true; sort(astr.begin(), astr.end()); for (size_t i = 0; i &amp;lt; astr.size() - 1; i++) { if</description>
    </item>
    
    <item>
      <title>vscode隐藏文件</title>
      <link>https://CorPython.github.io/post/vscode%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 02 Mar 2020 11:57:46 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vscode%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6/</guid>
      <description>vscode隐藏文件和文件夹 &amp;#34;files.exclude&amp;#34;: { &amp;#34;**/.classpath&amp;#34;: true, &amp;#34;**/.project&amp;#34;: true, &amp;#34;**/.settings&amp;#34;: true, &amp;#34;**/.factorypath&amp;#34;: true, &amp;#34;**/*.exe&amp;#34;: true, &amp;#34;**/$null&amp;#34;: true, &amp;#34;**/folder&amp;#34;:true, }, vscode使用git-bash &amp;#34;terminal.integrated.shell.windows&amp;#34;:&amp;#34;D:\\Git\\bin\\bash.exe&amp;#34;,</description>
    </item>
    
    <item>
      <title>hugo-maupassant主题添加gittalk评论</title>
      <link>https://CorPython.github.io/post/hugo-Maupassant%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0gittalk%E8%AF%84%E8%AE%BA/</link>
      <pubDate>Thu, 20 Feb 2020 18:51:43 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo-Maupassant%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0gittalk%E8%AF%84%E8%AE%BA/</guid>
      <description>更新主题之后发现评论功能丢了🤔,岂有此理,后面发现原来是主题不支持gittalk评论,之前是自己加上去的,所以为了自己的健忘症😂,还是写一篇博客记录一下😎! 注:Maupassant主题自带了utteranc评论功能,但是我觉得不是很好用,gittalk评论能够在github上创建</description>
    </item>
    
    <item>
      <title>C&#43;&#43;中关于数组的动态初始化问题</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E4%B8%AD%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E7%9A%84%E5%8A%A8%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 19 Feb 2020 18:54:19 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E4%B8%AD%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E7%9A%84%E5%8A%A8%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98/</guid>
      <description>这是一段c++代码; #include &amp;lt;iostream&amp;gt; using namespace std; int main() { int len = 5; int arr[len] { 0 }; for (size_t i = 0; i &amp;lt; len; i++) { cout &amp;lt;&amp;lt; arr[i] &amp;lt;&amp;lt; endl; } return 0; } 我们先看在g++中的运行情况: 我们将arr数组初始化为0.并输出,得到了正确的结果 然后我们在vs2019中运行,vs2019使用的是msvc编译器 直接运行出了错,因为动态数组长度必须是常量</description>
    </item>
    
    <item>
      <title>vscode修改默认的快捷键</title>
      <link>https://CorPython.github.io/post/vscode%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Sun, 16 Feb 2020 21:43:25 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vscode%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>这篇文章的由来是因为我在vscode上写cpp代码时发现注释的快捷键和我在其他编辑器上不同😵.于是我通过百度查找,终于在这篇问答中找到了答案😃,vscode使用的快捷键是shift + alt + a😭,大微软的使用习惯谁能琢磨透呢🤣 通常我们在写代码的时候会使用到两种注释方式 1.行注释 默认快</description>
    </item>
    
    <item>
      <title>Typecho主题设置备忘录</title>
      <link>https://CorPython.github.io/post/typecho%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E5%A4%87%E5%BF%98%E5%BD%95/</link>
      <pubDate>Sat, 15 Feb 2020 23:51:59 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/typecho%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E5%A4%87%E5%BF%98%E5%BD%95/</guid>
      <description>这篇文章主要是记录我的typecho博客主题Aria在后台的相关配置,我的博客地址点这里 虽然作者有对应的官方wiki文档,但是我是一个乐于折腾的人😉,所以可能时不时会想去换个主题尝试一下😂,但是由于主题没有保存原来的配置的功能😥,所以我决定把主题的部分配置记录下来😁,🆗下面就是我</description>
    </item>
    
    <item>
      <title>Html常用标签</title>
      <link>https://CorPython.github.io/post/Html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Tue, 11 Feb 2020 18:30:00 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/Html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>页面结构 基本结构 下面是HTML文档的基本组成部分 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;zh-CN&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;keyword&amp;#34; content=&amp;#34;Mysql,Laravel,Javascript,HTML,CSS,ES6,TYPESCRIPT,后盾人,后盾人教程&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;description&amp;#34; content=&amp;#34;后盾人专注WEB开发，高密度更</description>
    </item>
    
    <item>
      <title>Linux下解压安装压缩包</title>
      <link>https://CorPython.github.io/post/linux%E4%B8%8B%E8%A7%A3%E5%8E%8B%E5%AE%89%E8%A3%85%E5%8E%8B%E7%BC%A9%E5%8C%85/</link>
      <pubDate>Sun, 09 Feb 2020 19:33:41 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/linux%E4%B8%8B%E8%A7%A3%E5%8E%8B%E5%AE%89%E8%A3%85%E5%8E%8B%E7%BC%A9%E5%8C%85/</guid>
      <description>linux 下安装.tar.gz文件的安装方法 1.找到你下载的压缩包,解压 tar xvf xxxx.tar.gz 2.解压之后会在当前目录出现一个和压缩包名同名的文件夹,进入这个文件夹 ls //查看目录当前的文件 3.不同文件对应的编译方式 你观察一下这个目录中包含了以下哪一个文件：configure、Makefile还是Imak</description>
    </item>
    
    <item>
      <title>Centos系统yum下载错误</title>
      <link>https://CorPython.github.io/post/centos%E7%B3%BB%E7%BB%9Fyum%E4%B8%8B%E8%BD%BD%E9%94%99%E8%AF%AF/</link>
      <pubDate>Sat, 08 Feb 2020 23:49:16 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/centos%E7%B3%BB%E7%BB%9Fyum%E4%B8%8B%E8%BD%BD%E9%94%99%E8%AF%AF/</guid>
      <description>错误描述 File contains no section headers. file: file:///etc/yum.repos.d/mcepl-vim8-epel-7.repo, line: 2 原因 原因是没有配置yum源 解决 删除之前的yum源文件,自己获取阿里的源,命令 //删除该目录下所有文件 rm -f /etc/yum.repos.d/* //获取阿里源 wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo //清理缓存 yum clean all //下载测试安装 yum install vim</description>
    </item>
    
    <item>
      <title>服务器安装neovim</title>
      <link>https://CorPython.github.io/post/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85neovim/</link>
      <pubDate>Sat, 08 Feb 2020 21:36:02 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85neovim/</guid>
      <description>neovim的官方安装文档https://github.com/neovim/neovim/wiki/Installing-Neovim 安装nvim 1.使用命令在服务器上安装neovim,我用的服务器的linux系统是centos7 yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm yum install -y neovim python3-neovim 2.使用nvim命令进入 3.创</description>
    </item>
    
    <item>
      <title>leetcode287题</title>
      <link>https://CorPython.github.io/post/leetcode287%E9%A2%98/</link>
      <pubDate>Wed, 05 Feb 2020 21:01:59 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/leetcode287%E9%A2%98/</guid>
      <description>题目 给定一个包含 n+1 个整数的数组 nums,其数字都在 1 到 n 之间（包括 1 和n）,可知至少存在一个重复的整数.假设只有一个重复的整数,找出这个重复的数 示例 1: 输入: [1,3,4,2,2] 输出: 2 示例 2: 输入: [3,1,3,4,2] 输出: 3 说明： 不能更改原数组（假设数组是只读的） 只能使用额外的 O(1) 的空间 时间复杂度小于 O(n^2) 数组中只有一个</description>
    </item>
    
    <item>
      <title>markdown语法补充</title>
      <link>https://CorPython.github.io/post/markdown%E8%AF%AD%E6%B3%95%E8%A1%A5%E5%85%85/</link>
      <pubDate>Wed, 05 Feb 2020 12:36:57 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/markdown%E8%AF%AD%E6%B3%95%E8%A1%A5%E5%85%85/</guid>
      <description>我使用的markdown编辑器是typora或者vscode,基础的语法就不再提了,这篇文章会在我掌握的基础语法上补充新的语法(不定期更新) 实现文章标题跳转 1.使用html语法实现 (建议) &amp;lt;a href=&amp;#39;#标题名&amp;#39;&amp;gt;自定义&amp;lt;/a&amp;gt; 2.使用行内式链接</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11部分新特性</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;11%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E6%80%A7/</link>
      <pubDate>Mon, 03 Feb 2020 14:59:59 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;11%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E6%80%A7/</guid>
      <description>Variadic Templates 数量不定的模板参数 template &amp;lt;typename T1, typename... TS&amp;gt; //可以接受至少一个模板类型 template &amp;lt;typename... TS&amp;gt; //至少0个 递归分解可变参数函数的参数包 #include&amp;lt;iostream&amp;gt;#include&amp;lt;bitset&amp;gt; using namespace std; //当参数到0时,必须定义一个边界,不写这个报错 void print() {} //...就是pack（包） template&amp;lt;typename T, typename... Types&amp;gt; //模板参数包 void print(const T&amp;amp;fristArg, const Types &amp;amp;...args) {//types函数参数类型包，args函数参数包</description>
    </item>
    
    <item>
      <title>C&#43;&#43;中的const</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E4%B8%AD%E7%9A%84const/</link>
      <pubDate>Sun, 02 Feb 2020 11:12:17 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E4%B8%AD%E7%9A%84const/</guid>
      <description>const 变量 const变量指的是,此变量是只读的,不能被改变 如果我们在程序中试图改变const变量的值,编译器将报错,因此每次定义一个const变量时必须进行初始化 const int num = 15;//正确 const int num;//错误,必须进行初始化 const 结构体 和const int相同,必须在定义的时候进行初始化,并且</description>
    </item>
    
    <item>
      <title>C&#43;&#43;编译错误2</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF2/</link>
      <pubDate>Sat, 01 Feb 2020 16:22:33 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF2/</guid>
      <description>&amp;lsquo;shared_ptr&amp;rsquo; was not declared in this scope 在我编译下面这段代码时,对于智能指针shared_ptr编译出错 #include &amp;lt;string&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;memory&amp;gt; //shared_ptr class Base1 { }; class Derived1: public Base1 { }; class Base2 { }; class Derived2: public Base2 { }; template &amp;lt;class T1, class T2&amp;gt; struct pair { typedef T1 first_type; typedef T2 second_type; T1 first; T2 second; pair() : first(T1()), second(T2()) {} pair(const T1&amp;amp; a, const T2&amp;amp; b) : first(a), second(b) {} template &amp;lt;class U1, class U2&amp;gt; pair(const pair&amp;lt;U1, U2&amp;gt;&amp;amp; p) : first(p.first), second(p.second) {} }; int main(int argc, char const *argv[]) { pair&amp;lt;Derived1, Derived2&amp;gt; p; pair&amp;lt;Base1, Base2&amp;gt; p2(pair&amp;lt;Derived1, Derived2&amp;gt;()); pair&amp;lt;Base1, Base2&amp;gt; p3(p); // pair&amp;lt;Derived1, Derived2&amp;gt; p4(p3); // error: no matching function for call to</description>
    </item>
    
    <item>
      <title>C&#43;&#43;编译错误之与标准库函数冲突</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E4%B9%8B%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93%E5%87%BD%E6%95%B0%E5%86%B2%E7%AA%81/</link>
      <pubDate>Sat, 01 Feb 2020 15:10:38 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E4%B9%8B%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93%E5%87%BD%E6%95%B0%E5%86%B2%E7%AA%81/</guid>
      <description>error: call of overloaded &amp;lsquo;swap(int&amp;amp;, int&amp;amp;)&amp;rsquo; is ambiguous swap(a,b); 最近使用模板template写了一个swap函数,编译之后竟然出错了 代码如下: #include &amp;lt;iostream&amp;gt; using namespace std; template&amp;lt;class T&amp;gt; void swap(T&amp;amp; a, T&amp;amp; b) { T temp = b; b = a; a = temp; } int main(int argc, char const *argv[]) { int a = 15,b = 20; swap(a,b); cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; b &amp;lt;&amp;lt; endl; float m = 15,n = 22; swap(m,n); cout &amp;lt;&amp;lt; m &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; endl; return 0; } 报错信息 原因是因为标准库中已经定义过这个函数,只</description>
    </item>
    
    <item>
      <title>C&#43;&#43;面向对象程序设计(2)</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A12/</link>
      <pubDate>Thu, 30 Jan 2020 18:50:05 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A12/</guid>
      <description>Static static function没有this pointer,静态函数只能处理静态的数据. class template 类模板 声明方法： template &amp;lt;typename 标识符&amp;gt; 编译器从调用实参的类型，推导出函数模板的类型的参数。 template &amp;lt;typename T&amp;gt; class complex { public: complex(T r = 0, T i = 0 ) : re (r), im (i) { } complex&amp;amp; operator += ( const complex&amp;amp; ); T real () const {return re;} T imag () const {return im;} void real(T r) { re = r; } T func(const complex&amp;amp; param) { return param.re</description>
    </item>
    
    <item>
      <title>Pacman命令</title>
      <link>https://CorPython.github.io/post/Pacman%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 28 Jan 2020 19:46:12 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/Pacman%E5%91%BD%E4%BB%A4/</guid>
      <description>Pacman指令 1.安装软件 sudo pacman -S 软件名 2.更新软件源并更新你的软件 sudo pacman -Syu 3.查询软件 sudo pacman -Ss 软件名 4.请理已安装的软件的缓存(安装包) sudo pacman -Sc 5.删除某个软件 只删除安装包 sudo pacman -R 软件名 删除安装包及其依赖 sudo pacman -Rs 软件名 在上面的基础上删除该软件的全局配置(推荐) sudo pacman -Rns 软件名 6.查询本地已经</description>
    </item>
    
    <item>
      <title>Leetcode349题</title>
      <link>https://CorPython.github.io/post/leetcode349%E9%A2%98/</link>
      <pubDate>Mon, 27 Jan 2020 14:33:37 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/leetcode349%E9%A2%98/</guid>
      <description>题目 给定两个数组，编写一个函数来计算它们的交集。 示例 1: 输入: nums1 = [1,2,2,1], nums2 = [2,2] 输出: [2] 示例 2: 输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4] 输出: [9,4] 说明: 输出结果中的每个元素一定是唯一的。 我们可以不考虑输出结果的顺序。 题解 Hashset集合 1.使用两个Hashset,首先遍历数组1加入到set1中,再遍历数组2,判</description>
    </item>
    
    <item>
      <title>gcc和g&#43;&#43;的异与同</title>
      <link>https://CorPython.github.io/post/gcc%E5%92%8Cg&#43;&#43;%E7%9A%84%E5%BC%82%E5%90%8C/</link>
      <pubDate>Mon, 27 Jan 2020 11:04:30 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/gcc%E5%92%8Cg&#43;&#43;%E7%9A%84%E5%BC%82%E5%90%8C/</guid>
      <description>三个概念 GCC: GNU Compiler Collection(GUN 编译器集合),它可以编译C、C++、Java、Fortran、Pascal、Object-C等语言。 gcc: GCC中的GUN C Compiler（C 编译器） g++: GCC中的GUN C++ Compiler（C++编译器） gcc和g++区别 对于 *.c和 *.cpp文件，gcc分别当做c和</description>
    </item>
    
    <item>
      <title>vs2019快捷键</title>
      <link>https://CorPython.github.io/post/vs2019%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Mon, 27 Jan 2020 10:38:12 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vs2019%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>快捷键 说明 ctrl + c 复制该行 ctrl + x 删除该行 ctrl + d 剪切粘贴一次完成 ctrl + alt + 上/下 多光标操作 ctrl + shift + / 或者 ctrl + K +C 多行注释 ctrl + / 单行注释 alt + 上/下 移动上/下行 ctrl + K,ctrl + d(或者ctrl + k + d) 格式化代码 ctrl + 上/下 移动代码区不改变光标位置 shift + F12 查看所有引用 ctrl + shift + v 查看剪切板 ctrl + 减号[注意要</description>
    </item>
    
    <item>
      <title>vs2019代码智能提醒默认选中</title>
      <link>https://CorPython.github.io/post/vs2019%E4%BB%A3%E7%A0%81%E6%99%BA%E8%83%BD%E6%8F%90%E9%86%92%E9%BB%98%E8%AE%A4%E9%80%89%E4%B8%AD/</link>
      <pubDate>Sun, 26 Jan 2020 23:23:17 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vs2019%E4%BB%A3%E7%A0%81%E6%99%BA%E8%83%BD%E6%8F%90%E9%86%92%E9%BB%98%E8%AE%A4%E9%80%89%E4%B8%AD/</guid>
      <description>用过idea或者pycharm之类编译器的应该知道我这篇文章的意思,就是你在用vs2019写代码时的弹出来的智能提示没有自动帮你选中,而是弹出提示框让你自己按上下键先选中,这样不符合我的习惯,也降低了我的效率.我觉得作为windows端最强c++IDE不可能连这都没有吧,最后还是</description>
    </item>
    
    <item>
      <title>Leetcode290题</title>
      <link>https://CorPython.github.io/post/leetcode290%E9%A2%98/</link>
      <pubDate>Sun, 26 Jan 2020 22:45:15 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/leetcode290%E9%A2%98/</guid>
      <description>题目 给定一种规律 pattern 和一个字符串 str，判断 str 是否遵循相同的规律。 这里的 遵循 指完全匹配，例如， pattern 里的每个字母和字符串 str 中的每个非空单词之间存在着双向连接的对应规律。 示例1: 输入: pattern = &amp;quot;abba&amp;quot;, str = &amp;quot;dog cat cat dog&amp;quot; 输出: true 示例 2: 输入:pattern = &amp;quot;abba&amp;quot;, str = &amp;quot;dog cat cat fish&amp;quot; 输出: false 示例3: 输入: pattern = &amp;quot;aaaa&amp;quot;, str = &amp;quot;dog cat</description>
    </item>
    
    <item>
      <title>Leetcode137题</title>
      <link>https://CorPython.github.io/post/leetcode137%E9%A2%98/</link>
      <pubDate>Sun, 26 Jan 2020 16:36:12 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/leetcode137%E9%A2%98/</guid>
      <description>题目 给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。 示例 1: 输入: [2,2,3,2] 输出: 3 示例 2: 输入: [0,1,0,1,0,1,99] 输出: 99 题解 1.使用哈希表 遍历数组元素,第一次出现的元素加入到哈希表中,出现多次则将value置为false,由于数组中只有一个出现一次</description>
    </item>
    
    <item>
      <title>算法基础之位运算</title>
      <link>https://CorPython.github.io/post/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BD%8D%E8%BF%90%E7%AE%97/</link>
      <pubDate>Sat, 25 Jan 2020 09:52:35 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E4%B9%8B%E4%BD%8D%E8%BF%90%E7%AE%97/</guid>
      <description>运算符 含义 运算符 左移（后面补0） &amp;laquo; 右移（正数前面补0，负数补1） &amp;raquo; 按位或 ︳ 按位与 &amp;amp; 按位取反 ~ 按位异或 (相同为0不同为1) ^ 异或 两个相同的数异或的结果为0 任何数和0异或的结果为其本身 数学表达式如下 $$ \begin{aligned} &amp;amp;a \oplus 0=a\ &amp;amp;a \oplus a=0 \end{aligned} $$ 经典实例: 1.交换两个数的值 def change_num(num1,num2): num1 = num1 ^ num2 num2 = num1 ^ num2 num1 = num1 ^ num2 return num1,num2</description>
    </item>
    
    <item>
      <title>Leetcode832题</title>
      <link>https://CorPython.github.io/post/leetcode832%E9%A2%98/</link>
      <pubDate>Fri, 24 Jan 2020 15:57:02 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/leetcode832%E9%A2%98/</guid>
      <description>题目 给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。 水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。 反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。 示例 1: 输入: [[1,1,0],[1,0,1],[0,0,0]] 输出: [[1,0,0],[0,1,0],[1,1,1]] 解释: 首</description>
    </item>
    
    <item>
      <title>Leetcode461题</title>
      <link>https://CorPython.github.io/post/leetcode461%E9%A2%98/</link>
      <pubDate>Fri, 24 Jan 2020 13:41:51 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/leetcode461%E9%A2%98/</guid>
      <description>题目 两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。 给出两个整数 x 和 y，计算它们之间的汉明距离。 注意： 0 ≤ x, y &amp;lt; 2^31 示例: 输入: x = 1, y = 4 输出: 2 题解 将两个数进行异或操作,数有多少个1即可, java实现 class Solution { public int hammingDistance(int x, int y) { int z = x ^ y; int sum = 0; while(z != 0){ sum += z &amp;amp; 1; z</description>
    </item>
    
    <item>
      <title>Leetcode202题</title>
      <link>https://CorPython.github.io/post/leetcode202%E9%A2%98/</link>
      <pubDate>Fri, 24 Jan 2020 12:56:29 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/leetcode202%E9%A2%98/</guid>
      <description>题目 编写一个算法来判断一个数是不是快乐数。 一个快乐数定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。 示例: 输入: 19 输出: true 解释: 1 * 1 + 9*9 = 82 8*8 + 2*2 = 68 6*6</description>
    </item>
    
    <item>
      <title>Leetcode1281题</title>
      <link>https://CorPython.github.io/post/leetcode1281%E9%A2%98/</link>
      <pubDate>Fri, 24 Jan 2020 12:16:31 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/leetcode1281%E9%A2%98/</guid>
      <description>题目 给你一个整数 n，请你帮忙计算并返回该整数「各位数字之积」与「各位数字之和」的差。 示例 1： 输入：n = 234 输出：15 解释： 各位数之积 = 2 * 3 * 4 = 24 各位数之和 = 2 + 3 + 4 = 9 结果 = 24 - 9 = 15 示例 2： 输入：n = 4421 输出：21 解释： 各位数之积 = 4 * 4 * 2 * 1 = 32 各位数之和 = 4 + 4 + 2 + 1</description>
    </item>
    
    <item>
      <title>Leetcode20题</title>
      <link>https://CorPython.github.io/post/leetcode20%E9%A2%98/</link>
      <pubDate>Fri, 24 Jan 2020 11:28:59 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/leetcode20%E9%A2%98/</guid>
      <description>题目 给定一个只包括 &#39;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&#39; 的字符串，判断字符串是否有效。 有效字符串需满足： 左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。 注意空字符串可被认为是有效字符串。 示例 1: 输入: &amp;quot;()&amp;quot; 输出: true 示例 2: 输入: &amp;quot;()[]{}&amp;quot; 输出: true 示例 3: 输入: &amp;quot;(]&amp;quot; 输出: false 示例 4:</description>
    </item>
    
    <item>
      <title>Leetcode1题</title>
      <link>https://CorPython.github.io/post/leetcode1%E9%A2%98/</link>
      <pubDate>Thu, 23 Jan 2020 16:14:05 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/leetcode1%E9%A2%98/</guid>
      <description>题目 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数,并返回他们的数组下标。 你可以假设每种输入只会对应一个答案.但是,你不能重复利用这个数组中同样的元素。 示例: 给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1] 题解 遍历nums数组,判断t</description>
    </item>
    
    <item>
      <title>Leetcode13题</title>
      <link>https://CorPython.github.io/post/leetcode13%E9%A2%98/</link>
      <pubDate>Thu, 23 Jan 2020 12:43:09 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/leetcode13%E9%A2%98/</guid>
      <description>题目 罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。 字符 数值 I 1 V 5 X 10 L 50 C 100 D 500 M 1000 例如， 罗马数字 2 写做II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。 通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。</description>
    </item>
    
    <item>
      <title>Leetcode11题</title>
      <link>https://CorPython.github.io/post/leetcode11%E9%A2%98/</link>
      <pubDate>Thu, 23 Jan 2020 10:41:27 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/leetcode11%E9%A2%98/</guid>
      <description>题目 给定 n 个非负整数 a1，a2，&amp;hellip;，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。 说明：你不能倾斜容器，且 n 的值至少为 2。 图中垂直线代表输入数组 [1,8</description>
    </item>
    
    <item>
      <title>leetcode1323题</title>
      <link>https://CorPython.github.io/post/6%E5%92%8C9%E7%BB%84%E6%88%90%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E5%AD%97/</link>
      <pubDate>Wed, 22 Jan 2020 18:13:45 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/6%E5%92%8C9%E7%BB%84%E6%88%90%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E5%AD%97/</guid>
      <description>题目 给你一个仅由数字 6 和 9 组成的正整数 num.你最多只能翻转一位数字，将 6 变成 9，或者把 9 变成 6 。 请返回你可以得到的最大数字。 测试样例: 输入 6969 9666 输出 9969 9966 题解 1.将数字转化为字符串,遍历字符串,遇到第一个6将其转化为9即可. int maximum69Number (int num) { int res; string strNum; stringstream ss; stringstream sa; ss &amp;lt;&amp;lt; num; ss &amp;gt;&amp;gt; strNum; for (auto &amp;amp;i : strNum) { if (i == &amp;#39;6&amp;#39;)</description>
    </item>
    
    <item>
      <title>leetcode771题</title>
      <link>https://CorPython.github.io/post/%E5%AE%9D%E7%9F%B3%E5%92%8C%E7%9F%B3%E5%A4%B4/</link>
      <pubDate>Wed, 22 Jan 2020 16:43:24 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E5%AE%9D%E7%9F%B3%E5%92%8C%E7%9F%B3%E5%A4%B4/</guid>
      <description>题目 给定字符串J 代表石头中宝石的类型，和字符串 S代表你拥有的石头。 S 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。 J 中的字母不重复，J 和 S中的所有字符都是字母。字母区分大小写，因此&amp;quot;a&amp;quot;和&amp;quot;A&amp;quot;是不同类型的石头</description>
    </item>
    
    <item>
      <title>Leetcode709题</title>
      <link>https://CorPython.github.io/post/leetcode709/</link>
      <pubDate>Wed, 22 Jan 2020 15:20:05 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/leetcode709/</guid>
      <description>写在前面 首先需要知道一般的大小写转换的规则,小写字母对应的ASCII码的值比大写字母大,A对应的是65,a对应的是97,差值为32 所以大小写转换可以这么写: 大写--&amp;gt;小写:(char)(字符 + (&#39;a&#39; - &#39;A&#39;)) 小写--&amp;gt;大写:(char)(字符 - (&#39;a&#39; - &#39;A&#39;)) java实现 class Solution { public String toLowerCase(String str) {</description>
    </item>
    
    <item>
      <title>c&#43;&#43;中的大小写转换</title>
      <link>https://CorPython.github.io/post/%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Wed, 22 Jan 2020 15:12:24 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2/</guid>
      <description>在不适用库函数的基础上将字符串中的字母进行大小写转换 所有的小写字母转换为大写字母 #include &amp;lt;iostream&amp;gt;using namespace std; string toLower(string s) { for(auto &amp;amp;i:s) { i &amp;amp;= -33; } return s; } int main(int argc, char const *argv[]) { string str = &amp;#34;aAAb&amp;#34;; cout &amp;lt;&amp;lt; toLower(str) &amp;lt;&amp;lt; endl; return 0; } 输出结果:AAAB 所有的大写字母转换为小写字母 #include &amp;lt;iostream&amp;gt;using namespace std; string toLower(string s) { for(auto &amp;amp;i:s) { i |= 32; } return s; } int main(int argc, char const *argv[]) { string str = &amp;#34;aAAb&amp;#34;; cout &amp;lt;&amp;lt; toLower(str) &amp;lt;&amp;lt; endl; return 0; } 输出结</description>
    </item>
    
    <item>
      <title>七牛云绑定自定义域名</title>
      <link>https://CorPython.github.io/post/%E4%B8%83%E7%89%9B%E4%BA%91%E7%BB%91%E5%AE%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/</link>
      <pubDate>Tue, 21 Jan 2020 11:19:53 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E4%B8%83%E7%89%9B%E4%BA%91%E7%BB%91%E5%AE%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D/</guid>
      <description>上一篇文章记录了我备案的一些坑,这篇博客主要是关于如何使用自己备案之后的域名配合七牛图床使用 关于如何配置七牛图床,请看我的这篇文章 为什么要绑定自定义域名 七牛云免费送10g的存储空间,但是如果你没有自己的域名,那么它会给你30天的免费体验.在这期间,你所使用的域名是七牛云的测试域名</description>
    </item>
    
    <item>
      <title>Hugo添加音乐最终章之悬浮音乐播放器</title>
      <link>https://CorPython.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E6%9C%80%E7%BB%88%E7%AB%A0%E4%B9%8B%E6%82%AC%E6%B5%AE%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</link>
      <pubDate>Mon, 20 Jan 2020 21:26:23 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E6%9C%80%E7%BB%88%E7%AB%A0%E4%B9%8B%E6%82%AC%E6%B5%AE%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE%E5%99%A8/</guid>
      <description>前言 上一次添加音乐的方式是使用Aplayer和Meting在文章内添加音乐 具体参考这一篇文章,不过在文章内添加音乐好像没内味,感觉不大符合阅读时候的逻辑,我想做到的是在文章的一处放置播放器,先打开的时候就打开,所以生命不息,折腾不止.我又开始到各大网站去找参考方案.最后在Apla</description>
    </item>
    
    <item>
      <title>记第一次备案踩过的那些坑</title>
      <link>https://CorPython.github.io/post/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%A4%87%E6%A1%88%E8%B8%A9%E8%BF%87%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/</link>
      <pubDate>Mon, 20 Jan 2020 20:00:35 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%A4%87%E6%A1%88%E8%B8%A9%E8%BF%87%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/</guid>
      <description>备案的由来 关于备案的解释:以下来自百度百科 网站备案是指向主管机关报告事由存案以备查考。行政法角度看备案，实践中主要是《立法法》和《法规规章备案条例》的规定。网站备案的目的就是为了防止在网上从事非法的网站经营活动，打击不良互联网信息的传播，如果网站不备案的话，很有可能被查处以后关停</description>
    </item>
    
    <item>
      <title>Leetcode229题</title>
      <link>https://CorPython.github.io/post/leetcode229%E9%A2%98/</link>
      <pubDate>Sun, 19 Jan 2020 15:47:07 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/leetcode229%E9%A2%98/</guid>
      <description>题目 给定一个大小为 n 的数组，找出其中所有出现超过 ⌊ n/3 ⌋ 次的元素。 说明: 要求算法的时间复杂度为 O(n)，空间复杂度为 O(1)。 示例 1: 输入: [3,2,3] 输出: [3] 示例 2: 输入: [1,1,1,3,3,2,2,2] 输出: [1,2] 题解 1.投票法 由于要求找到的是出现次数超过⌊ n/3 ⌋ 的元素,所以最多可以找到两个不同的数字,假定两个结果候选人者,遍</description>
    </item>
    
    <item>
      <title>hugo添加fancybox功能</title>
      <link>https://CorPython.github.io/post/hugo%E4%BD%BF%E7%94%A8fancybox%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Sat, 18 Jan 2020 10:23:53 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo%E4%BD%BF%E7%94%A8fancybox%E5%8A%9F%E8%83%BD/</guid>
      <description>前言 一直想给博客加上图片灯箱功能,可是一直google不到解决方案,或者一堆没有用的教程,今天通过查阅fancybox官网找到了解决方案.通过在博客中添加&amp;lt; a &amp;gt;标签来实现该功能 使用说明 1.加载jqury和fancybox文件,在博客文件footer.html中添加下面</description>
    </item>
    
    <item>
      <title>Hugo0.60以上缺少html标签内的内容</title>
      <link>https://CorPython.github.io/post/hugo6.0%E4%BB%A5%E4%B8%8A%E7%BC%BA%E5%B0%91html%E6%A0%87%E7%AD%BE%E5%86%85%E5%AE%B9/</link>
      <pubDate>Sat, 18 Jan 2020 09:05:35 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo6.0%E4%BB%A5%E4%B8%8A%E7%BC%BA%E5%B0%91html%E6%A0%87%E7%AD%BE%E5%86%85%E5%AE%B9/</guid>
      <description>新版Hugo无法渲染html标签 在更新到Hugo版本0.62之后,我发现生成的HTML文件中缺少所有使用HTML标记的图像。原因是.以前,Hugo使用 Blackfriday渲染Markdown文件。从Hugo 0.60版本开始，默认的Markdown渲染器已更改为goldmark。</description>
    </item>
    
    <item>
      <title>Hugo添加latex公式渲染</title>
      <link>https://CorPython.github.io/post/hugo%E6%B7%BB%E5%8A%A0latex%E5%85%AC%E5%BC%8F%E6%B8%B2%E6%9F%93/</link>
      <pubDate>Thu, 16 Jan 2020 19:23:38 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo%E6%B7%BB%E5%8A%A0latex%E5%85%AC%E5%BC%8F%E6%B8%B2%E6%9F%93/</guid>
      <description>使用方法 经过一番google后找到的这个方案!这个想法是通过将所有内容都包含在同一代码中&amp;lt; script &amp;gt;并添加async来实现渲染 &amp;lt;script type=&amp;#34;text/javascript&amp;#34; async src=&amp;#34;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;#34;&amp;gt; MathJax.Hub.Config({ tex2jax: { inlineMath: [[&amp;#39;$&amp;#39;,&amp;#39;$&amp;#39;], [&amp;#39;\\(&amp;#39;,&amp;#39;\\)&amp;#39;]], displayMath: [[&amp;#39;$$&amp;#39;,&amp;#39;$$&amp;#39;]], processEscapes: true, processEnvironments: true, skipTags: [&amp;#39;script&amp;#39;, &amp;#39;noscript&amp;#39;, &amp;#39;style&amp;#39;, &amp;#39;textarea&amp;#39;, &amp;#39;pre&amp;#39;], TeX: { equationNumbers: { autoNumber: &amp;#34;AMS&amp;#34; }, extensions: [&amp;#34;AMSmath.js&amp;#34;, &amp;#34;AMSsymbols.js&amp;#34;] } } }); MathJax.Hub.Queue(function() { // Fix &amp;lt;code&amp;gt; tags after MathJax finishes running. This is a // hack to overcome a shortcoming of Markdown. Discussion at // https://github.com/mojombo/jekyll/issues/199 var all = MathJax.Hub.getAllJax(), i; for(i = 0; i &amp;lt; all.length; i += 1)</description>
    </item>
    
    <item>
      <title>STL基础用法</title>
      <link>https://CorPython.github.io/post/STL%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</link>
      <pubDate>Tue, 14 Jan 2020 20:35:27 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/STL%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</guid>
      <description>STL:Standard Template Library 标准模板库 序列式容器[Sequential Containers] Array(数组) Vector(单向变长数组) Deque(双向变长数组) List(双向链表) Forward-List(单向链表) 关联式容器[Associative Containers] Set/Multiset(不重复/可重复集合) Map/Multim</description>
    </item>
    
    <item>
      <title>C&#43;&#43;基础笔记(2)</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B02/</link>
      <pubDate>Tue, 14 Jan 2020 10:52:48 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B02/</guid>
      <description>转换函数 [conversion function] #include &amp;lt;iostream&amp;gt; using namespace std; class Fraction { public: Fraction(int num, int den = 1) : m_numerator(num), m_denominator(den) {} operator double() const { //转换函数,将Fraction转换为double return (double)m_numerator / m_denominator; } private: int m_numerator;//分子 int m_denominator;//分母 }; int main() { Fraction f(3, 5); double d = 4 + f; cout &amp;lt;&amp;lt; d &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; f &amp;lt;&amp;lt; endl; //f的值为0.6 return 0; } 任何Fractio</description>
    </item>
    
    <item>
      <title>IDEA2019中文字体渲染问题</title>
      <link>https://CorPython.github.io/post/IDEA2019%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 11 Jan 2020 18:10:24 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/IDEA2019%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E6%B8%B2%E6%9F%93%E9%97%AE%E9%A2%98/</guid>
      <description>IDEA 2018.2升级到 IDEA 2019.3,中文字体渲染问题 原文链接 解决方案 修改一下备用字体就可以 共需要修改两处： 1、Setting -&amp;gt; Editor -&amp;gt; Font 修改 Fallback font 为 simsun 2、Setting -&amp;gt; Editor -&amp;gt; Color Scheme -&amp;gt; Color Scheme Font 修改 Fallback font 为 simsun</description>
    </item>
    
    <item>
      <title>一道有趣的c语言习题</title>
      <link>https://CorPython.github.io/post/%E4%B8%80%E9%81%93%E6%9C%89%E8%B6%A3%E7%9A%84c%E8%AF%AD%E8%A8%80%E4%B9%A0%E9%A2%98/</link>
      <pubDate>Thu, 09 Jan 2020 21:37:59 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E4%B8%80%E9%81%93%E6%9C%89%E8%B6%A3%E7%9A%84c%E8%AF%AD%E8%A8%80%E4%B9%A0%E9%A2%98/</guid>
      <description>这道题来自于浙江大学翁恺老师的C语言程序设计CAP课程中的一道课堂测试题 题目: #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt; #define TOUPPER(c) (&amp;#39;a&amp;#39;&amp;lt;=(c)&amp;amp;&amp;amp;(c)&amp;lt;=&amp;#39;z&amp;#39;?(c)-&amp;#39;a&amp;#39;+&amp;#39;A&amp;#39;:(c)) int main(int argc, char const *argv[]) { char s[10]; strcpy(s, &amp;#34;abcd&amp;#34;); int i = 0; printf(&amp;#34;%c\n&amp;#34;,TOUPPER(s[++i])); return 0; } 输出结果是什么呢?我相信很多人猜的都是B,你也可以自己试着填一下答案,或者把我上面这个程序运行一下. 最终的答案是D! 那么过程是怎样的呢,我们在终端依次输</description>
    </item>
    
    <item>
      <title>查看自己的编译器支持的c&#43;&#43;标准</title>
      <link>https://CorPython.github.io/post/%E6%9F%A5%E7%9C%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BC%96%E8%AF%91%E5%99%A8%E6%94%AF%E6%8C%81%E7%9A%84c&#43;&#43;%E6%A0%87%E5%87%86/</link>
      <pubDate>Thu, 09 Jan 2020 19:28:20 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E6%9F%A5%E7%9C%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BC%96%E8%AF%91%E5%99%A8%E6%94%AF%E6%8C%81%E7%9A%84c&#43;&#43;%E6%A0%87%E5%87%86/</guid>
      <description>在自己的编译器中运行下面代码 #include &amp;lt;iostream&amp;gt;using namespace std; int main(int argc, char const *argv[]) { cout &amp;lt;&amp;lt; __cplusplus &amp;lt;&amp;lt; endl; return 0; } 我的编译器的运行结果是: 201402 下面是对应的c++标准的值: C ++ 98：__cplusplus是199711L。 C ++ 11：__cplusplus是201103L。 C ++ 14：__cplusplus是201402L。 C ++ 17：</description>
    </item>
    
    <item>
      <title>C语言宏定义</title>
      <link>https://CorPython.github.io/post/c%E8%AF%AD%E8%A8%80%E5%AE%8F%E5%AE%9A%E4%B9%89/</link>
      <pubDate>Thu, 09 Jan 2020 17:07:56 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c%E8%AF%AD%E8%A8%80%E5%AE%8F%E5%AE%9A%E4%B9%89/</guid>
      <description>c语言宏定义初识 带参数的宏的原则: 一切都要括号 整个值要括号 参数出现的每个地方都要括号 注意:结尾千万不要加上分号 #include&amp;lt;stdio.h&amp;gt;#include&amp;lt;stdlib.h&amp;gt; #define MAX( x, y ) ( ((x) &amp;gt; (y)) ? (x) : (y) ) #define MIN( x, y ) ( ((x) &amp;lt; (y)) ? (x) : (y) ) #define UPCASE( c ) ( ((c) &amp;gt;= &amp;#39;a&amp;#39; &amp;amp;&amp;amp; (c) &amp;lt;= &amp;#39;z&amp;#39;) ? ((c) - 0x20) : (c) )//大小写转换 #define Cube(x) ((x) * (x) * (x) ) #define func(x) ((x) / 3) #define PI 3.14 //#undef PI 撤销宏定义 int main() { printf(&amp;#34;%.2f\n&amp;#34;,PI); printf(&amp;#34;%d\n&amp;#34;,MAX(15,20)); printf(&amp;#34;%.1f\n&amp;#34;,MAX(15.5,20.5)); printf(&amp;#34;%c\n&amp;#34;,UPCASE(&amp;#39;a&amp;#39;));</description>
    </item>
    
    <item>
      <title>C&#43;&#43;面向对象程序设计(1)</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 08 Jan 2020 11:53:35 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</guid>
      <description>Classes的两个经典分类 Class without pointer member(s) ![]( Class with pointer member(s) ) Header中的防卫式声明 complex.h #ifndef __COMPLEX__ #define __COMPLEX__ #endif inline function 函数若在class body内定义完成，便自动成为inline function的候选人. class body之外定义的函数，需要加上inline关键字，以此建议编译器将其编译为inline function constr</description>
    </item>
    
    <item>
      <title>Sublime Text搭建c/c&#43;&#43;编译运行环境</title>
      <link>https://CorPython.github.io/post/sumblime%E5%88%9B%E5%BB%BAc_c&#43;&#43;%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Tue, 07 Jan 2020 16:06:27 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/sumblime%E5%88%9B%E5%BB%BAc_c&#43;&#43;%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</guid>
      <description>前言 我配置的c/c++环境主要是为了写一些简单的算法或者小程序,看重的是Sublime Text 3的轻量,启动速度快,其次你必须先将自己的cmd设置为默认utf-8编码,这样做主要是为了防止一些编码问题,如果你习惯使用GBK编码,请不要看下面的配置 ! ! ! 设置cmd为默认UTF-8 使用快捷</description>
    </item>
    
    <item>
      <title>C&#43;&#43;编译错误1</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 07 Jan 2020 15:50:02 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E7%AC%94%E8%AE%B0/</guid>
      <description>编译cpp文件时报错: ld.exe: can not open file ...xxx.exe:permission denied collect2.exe error ld returned 1 exit status 原因:代码当前目录（包括子目录）下有同名的.exe文件，会报此错误，只要把名字改一下就行了</description>
    </item>
    
    <item>
      <title>C&#43;&#43;基础笔记(1)</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sun, 05 Jan 2020 16:51:13 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E5%9F%BA%E7%A1%80/</guid>
      <description>输入输出 #include &amp;lt;iostream&amp;gt;using namespace std; //c++输入输出 int main() { string str = &amp;#34;hello world!&amp;#34;; int a; //endl有换行的功能 cout &amp;lt;&amp;lt; str &amp;lt;&amp;lt; endl; cin &amp;gt;&amp;gt; a; cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; cout &amp;lt;&amp;lt; a; return 0; } using namespace std ,它声明了命名空间 std,后续如果有未指定命名空间的符号,那么默认使用 std,这样就可以使用 cin,cout,vector 等。 cin 用于从控制台获取用户输入,cout 用于将数据输出到控制台 cin</description>
    </item>
    
    <item>
      <title>你好,2020</title>
      <link>https://CorPython.github.io/post/%E4%BD%A0%E5%A5%BD2020/</link>
      <pubDate>Wed, 01 Jan 2020 20:42:17 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E4%BD%A0%E5%A5%BD2020/</guid>
      <description>告别2019,展望2020 ​ 2019年走完了最后一天,迎来了全新的2020年.去年这一年总的来说并不是很满意,学习成绩表现没有2018年那么令人满意了,可能是因为我自己对于考试的漫不经心,也可能是我自己没有追求高分的欲望.面对着自己不是特别感兴趣的硬件似乎丧失了我的学习动力!但是</description>
    </item>
    
    <item>
      <title>fatal: remote error: You can&#39;t push to git 解决办法</title>
      <link>https://CorPython.github.io/post/gitpush%E5%87%BA%E9%94%99/</link>
      <pubDate>Sun, 29 Dec 2019 17:27:01 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/gitpush%E5%87%BA%E9%94%99/</guid>
      <description>错误描述 fatal: remote error: You can&amp;#39;t push to git://github.com:CorPython/java_repo.git Use git@github.com:CorPython/java_repo.git 原因:如果在git clone的时候用的是git://github.com:xx/xxx.git的形式,那么就会出现这个问题 解决方案 输入下面的指令 git remote rm origin git remote add origin git@github.com:CorPython/java_repo.git git push origin 会出现下面的提示 输入上述的命令即可 git push --set-upstream origin master 成功上传!</description>
    </item>
    
    <item>
      <title>初探BFS,DFS</title>
      <link>https://CorPython.github.io/post/%E5%88%9D%E6%8E%A2BFSDFS/</link>
      <pubDate>Sat, 28 Dec 2019 21:43:51 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E5%88%9D%E6%8E%A2BFSDFS/</guid>
      <description>图结构 BFS BFS又称广度优先搜索,通常用队列的思想来实现 # 输出不同结点为起始点的BFS结果 def BFS(graph,s): queue = [] a = [] queue.append(s) seen = set() seen.add(s) while(len(queue) &amp;gt; 0): vertex = queue.pop(0) nodes = graph[vertex] for w in nodes: if w not in seen: queue.append(w) seen.add(w) if(vertex is not None): a.append(vertex) return a graph = { &amp;#34;A&amp;#34;: [&amp;#34;B&amp;#34;,&amp;#34;C&amp;#34;], &amp;#34;B&amp;#34;: [&amp;#34;A&amp;#34;,&amp;#34;C&amp;#34;,&amp;#34;D&amp;#34;], &amp;#34;C&amp;#34;: [&amp;#34;A&amp;#34;,&amp;#34;B&amp;#34;,&amp;#34;D&amp;#34;,&amp;#34;E&amp;#34;], &amp;#34;D&amp;#34;: [&amp;#34;B&amp;#34;,&amp;#34;C&amp;#34;,&amp;#34;E&amp;#34;,&amp;#34;F&amp;#34;], &amp;#34;E&amp;#34;: [&amp;#34;C&amp;#34;,&amp;#34;D&amp;#34;], &amp;#34;F&amp;#34;: [&amp;#34;D&amp;#34;] } array = [&amp;#34;A&amp;#34;,&amp;#34;B&amp;#34;,&amp;#34;C&amp;#34;,&amp;#34;D&amp;#34;,&amp;#34;E&amp;#34;,&amp;#34;F&amp;#34;] for w in array: print(BFS(graph,w)) 运行结果: $ python -u &amp;#34;d:\python\BFS.py&amp;#34; [&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;F&amp;#39;] [&amp;#39;B&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;F&amp;#39;] [&amp;#39;C&amp;#39;, &amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;D&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;F&amp;#39;] [&amp;#39;D&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;E&amp;#39;, &amp;#39;F&amp;#39;,</description>
    </item>
    
    <item>
      <title>八皇后问题</title>
      <link>https://CorPython.github.io/post/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 28 Dec 2019 21:42:24 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title>java线程基础</title>
      <link>https://CorPython.github.io/post/java%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 28 Dec 2019 20:10:15 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/java%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</guid>
      <description>学习视频 java多线程的不可见性 假设现在有一个布尔型变量a=true,后面将其修改为false,随后输出这个值,显而易见应该为false,现在在主函数中建立一个线程读取变量a的值,那a的值能否读到false呢? 现在来写一下这个代码 public class test { static boolean a = true; public static void main(String[] args) throws InterruptedException { new Thread(() -&amp;gt; { //a为</description>
    </item>
    
    <item>
      <title>C/c&#43;&#43;排序</title>
      <link>https://CorPython.github.io/post/c%E8%AF%AD%E8%A8%80%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Wed, 25 Dec 2019 21:53:10 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c%E8%AF%AD%E8%A8%80%E6%8E%92%E5%BA%8F/</guid>
      <description>c++ 1.sort()函数 头文件#include&amp;lt;algorithm&amp;gt; #include&amp;lt;iostream&amp;gt;#include&amp;lt;algorithm&amp;gt; using namespace std; int main() { int a[10]= {9,6,3,8,5,2,7,4,1,0}; for(int i=0; i&amp;lt;10; i++) cout&amp;lt;&amp;lt;a[i]&amp;lt;&amp;lt;&amp;#34; &amp;#34;; cout&amp;lt;&amp;lt;endl; //数组长度 cout &amp;lt;&amp;lt; sizeof(a)/sizeof(a[0]) &amp;lt;&amp;lt; endl; sort(a,a+10);//注意是加上数组长度 for(int i=0; i&amp;lt;10; i++) cout&amp;lt;&amp;lt;a[i]&amp;lt;&amp;lt;&amp;#34; &amp;#34;; return 0; } sort()自定义函数 #include&amp;lt;iostream&amp;gt;#include&amp;lt;vector&amp;gt;#include&amp;lt;algorithm&amp;gt; using namespace std; bool Comp(const int &amp;amp;a,const int &amp;amp;b) { return a&amp;gt;b; } int main() { vector&amp;lt;int&amp;gt; v; for (int i = 0; i &amp;lt; 10; ++i) {</description>
    </item>
    
    <item>
      <title>IAR快捷键</title>
      <link>https://CorPython.github.io/post/IAR%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Tue, 24 Dec 2019 13:05:52 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/IAR%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>帮助文档：F1 Make：F7 跳转到定义：F4 全速运行：F5 单步运行：F10 添加断点：F9 使能/使能断点：Ctrl+F9 烧录程序：Ctrl + D 注释多行：Ctrl+K（单行也是这个） 取消注释：Ctrl+Shfit+K 烧录程序：Ctrl+D（进入调试程序） 退出调试：Ctrl+Shift</description>
    </item>
    
    <item>
      <title>git操作笔记</title>
      <link>https://CorPython.github.io/post/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 23 Dec 2019 14:19:00 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>github及git版本控制 git基本操作 1.创建一个版本库 新建一个目录git_test,在git_test目录下创建一个版本库 git init 2.在git_test下创建一个新文件code.txt vi code.txt#创建一个新文件 cat code.txt#查看文件中的内容 3.新建一个文件版本（比</description>
    </item>
    
    <item>
      <title>vscode如何写latex</title>
      <link>https://CorPython.github.io/post/vscode%E7%BC%96%E5%86%99latex/</link>
      <pubDate>Fri, 20 Dec 2019 18:25:21 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vscode%E7%BC%96%E5%86%99latex/</guid>
      <description>介绍 以下介绍摘自百度百科,链接:https://baike.baidu.com/item/LaTeX/1212106?fr=aladdin LaTeX（LATEX，音译“拉泰赫”）是一种基于ΤΕΧ的排版系统，由美国计算机学家莱斯利·兰伯特（Leslie Lamport）在20世纪80</description>
    </item>
    
    <item>
      <title>windows下载安装latex</title>
      <link>https://CorPython.github.io/post/windows%E5%AE%89%E8%A3%85latex/</link>
      <pubDate>Thu, 19 Dec 2019 21:19:37 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/windows%E5%AE%89%E8%A3%85latex/</guid>
      <description>下载方式 1.官网下载 下载地址 2.清华大学官方镜像站下载(推荐) 下载地址 2.安装 下载完成后,打开iso文件,点击下图箭头文件 点击修改更换路径,再点击advanced 修改一些选项 点击安装,等待安装完成即可 ! ! ! 3.验证安装是否成功 打开powershell或者cmd输入下列命令 xelatex -v 出现</description>
    </item>
    
    <item>
      <title>Sql server触发器及存储过程</title>
      <link>https://CorPython.github.io/post/sqlserver%E8%A7%A6%E5%8F%91%E5%99%A8/</link>
      <pubDate>Tue, 10 Dec 2019 20:35:22 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/sqlserver%E8%A7%A6%E5%8F%91%E5%99%A8/</guid>
      <description>SQL server触发器及存储过程 删除触发器 /* 1.在表Student中建立删除触发器，实现表Student和表SC的级联删除，也就是只要删除表Student 中的元组学号为s1，则表SC中SNO为s1的元组也要删除；建立触发器后用企业管理器删除Student中学号为30的元组，看看表S</description>
    </item>
    
    <item>
      <title>maven配置</title>
      <link>https://CorPython.github.io/post/maven%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 08 Dec 2019 11:56:45 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/maven%E9%85%8D%E7%BD%AE/</guid>
      <description>&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt; &amp;lt;!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the &amp;#34;License&amp;#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &amp;#34;AS IS&amp;#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --&amp;gt; &amp;lt;!-- | This is the configuration file for Maven. It can be specified at two levels: | | 1. User Level. This</description>
    </item>
    
    <item>
      <title>hugo添加音乐功能</title>
      <link>https://CorPython.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Thu, 05 Dec 2019 20:42:50 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E5%8A%9F%E8%83%BD/</guid>
      <description>前言 最近参考很多博客的搭建过程,发现他们的博客都有这个音乐功能.我想着有人在访问你的博客有音乐听听好像也不错(其实就是想把博客功能做好一点).有了这个想法之后,我谷歌了很多方法,也从很多博客找简单一点的实现方法,毕竟本人没有学过html和js,所以很多教程都无法复现他们的操作,导</description>
    </item>
    
    <item>
      <title>IDEA常用快捷键</title>
      <link>https://CorPython.github.io/post/IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Wed, 04 Dec 2019 20:46:09 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>1.返回上一次查看代码的位置 ctrl + alt + 左键 2.代码格式化快捷键 ctrl + alt + L 3.查看最近打开的文件 ctrl + E 4.查看最近修改的文件 ctrl + shift + E 5.查看当前文件的结构 ctrl + F12 6.语句完成 ctrl + shift + enter 7.可以生成构造器/Getter/Setter/toString Alt + Insert 8.导入包,自动修正 ctrl + enter 9.</description>
    </item>
    
    <item>
      <title>Hugo使用本地的图片</title>
      <link>https://CorPython.github.io/post/hugo%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E7%9A%84%E5%9B%BE%E7%89%87/</link>
      <pubDate>Thu, 28 Nov 2019 22:15:53 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0%E7%9A%84%E5%9B%BE%E7%89%87/</guid>
      <description>前言 ​ 上次出了一篇关于搭建github图床的教程,里面也谈到了我当时并没有找到或者说实现本地图片在博客中使用的方法.由于本人的强迫症.于是我又不断的去找资料,终于在一个视频中找到了在hugo使用本地的图片的方法,我猜新手也不愿意自己搭建图床,所以请接着看下面的方法吧! 使用方法 首先</description>
    </item>
    
    <item>
      <title>GitHub&#43;jsDelivr&#43;PicGo打造稳定快速高效图床</title>
      <link>https://CorPython.github.io/post/GitHub&#43;jsDelivr&#43;PicGo%E6%89%93%E9%80%A0%E7%A8%B3%E5%AE%9A%E5%BF%AB%E9%80%9F%E9%AB%98%E6%95%88%E5%9B%BE%E5%BA%8A/</link>
      <pubDate>Wed, 27 Nov 2019 20:06:38 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/GitHub&#43;jsDelivr&#43;PicGo%E6%89%93%E9%80%A0%E7%A8%B3%E5%AE%9A%E5%BF%AB%E9%80%9F%E9%AB%98%E6%95%88%E5%9B%BE%E5%BA%8A/</guid>
      <description>前言 用hugo写博客可能图片是比较重要的一环吧.本来时指望在博客中使用本地的图片,但是由于自己的能力有限,并且看了一些大神都不推荐使用本地图片.推荐使用图床来管理自己的博客图片. 常见的免费图床建议参考这篇文章:盘点一下免费好用的图床 但是,今天不是介绍免费图床的使用,这次主要是介绍</description>
    </item>
    
    <item>
      <title>WireShark找不到接口或者网卡</title>
      <link>https://CorPython.github.io/post/WireShark%E6%89%BE%E4%B8%8D%E5%88%B0%E6%8E%A5%E5%8F%A3%E6%88%96%E8%80%85%E7%BD%91%E5%8D%A1/</link>
      <pubDate>Tue, 19 Nov 2019 22:19:14 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/WireShark%E6%89%BE%E4%B8%8D%E5%88%B0%E6%8E%A5%E5%8F%A3%E6%88%96%E8%80%85%E7%BD%91%E5%8D%A1/</guid>
      <description>wireshark是一款win10上的抓包软件.详情请点击官网 安装过程就不再赘述,请自己百度 百度的解释为: Wireshark（前称Ethereal）是一个网络封包分析软件。网络封包分析软件的功能是撷取网络封包，并尽可能显示出最为详细的网络封包资料。Wireshark使用WinPC</description>
    </item>
    
    <item>
      <title>hugo添加博客字数统计功能</title>
      <link>https://CorPython.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E5%8D%9A%E5%AE%A2%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Fri, 15 Nov 2019 13:31:15 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo%E6%B7%BB%E5%8A%A0%E5%8D%9A%E5%AE%A2%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD/</guid>
      <description>1.在自己的博客的文章中找到你想将字数多少显示的具体位置,假如我想将它放在阅读数的后面,先定位到阅读数的源代码位置,找到对应的class位置. 2.在自己主题的single.html的配置中搜索第一步中的class的位置,并在{{ end }}后面添加一下代码,比如我的主题对应的singl</description>
    </item>
    
    <item>
      <title>hugo如何将文章置顶</title>
      <link>https://CorPython.github.io/post/hugo%E5%A6%82%E4%BD%95%E5%B0%86%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/</link>
      <pubDate>Fri, 15 Nov 2019 13:04:44 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo%E5%A6%82%E4%BD%95%E5%B0%86%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/</guid>
      <description>在创建的博客或者写过的博客的Front matter中添加下列字段 weight:1</description>
    </item>
    
    <item>
      <title>git clone出错</title>
      <link>https://CorPython.github.io/post/gitcloneerror/</link>
      <pubDate>Thu, 14 Nov 2019 20:39:01 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/gitcloneerror/</guid>
      <description>问题如下图: 输入命令,修改https方式下载改为使用ssh下载方式 git config --global url.git：//github.com/.insteadOf https://github.com/</description>
    </item>
    
    <item>
      <title>Vim代码自动补全</title>
      <link>https://CorPython.github.io/post/vim%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/</link>
      <pubDate>Thu, 14 Nov 2019 12:36:58 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vim%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8/</guid>
      <description>vim自带的代码补全快捷键 ctrl + N</description>
    </item>
    
    <item>
      <title>Github同步已fork的项目</title>
      <link>https://CorPython.github.io/post/github%E5%90%8C%E6%AD%A5fork%E7%9A%84%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Wed, 13 Nov 2019 18:30:44 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/github%E5%90%8C%E6%AD%A5fork%E7%9A%84%E9%A1%B9%E7%9B%AE/</guid>
      <description>给出两种方法 1.使用git指令进行更新 git remote -v git remote add upstream git@github.com:xxx/xxx.git git fetch upstream git merge upstream/master 2.在Github Desktop上更新</description>
    </item>
    
    <item>
      <title>Vim如何安装插件</title>
      <link>https://CorPython.github.io/post/vim%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Wed, 13 Nov 2019 16:54:24 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vim%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6/</guid>
      <description>vim 安装插件 1.vim在linux下的配置文件的地址有以下两z种方法 vim /home/用户名/.vimrc(比如vim /home/zhangfp/.vimrc) 或者 vim ~/.vimrc 2.安装插件管理器vim_plug curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 3.使用命令更新配置文件 :source ~/.vimrc 4.加入自己想用的插件 call plug#begin(&amp;#39;~/.vim/plugged&amp;#39;) &amp;#34; 将该插件加入到插件列表 Plug &amp;#39;mhinz/vim-startify&amp;#39; call plug#end() 5.开始安装插件 :PlugInstall vim-plug 操作 在</description>
    </item>
    
    <item>
      <title>Pacman包管理命令</title>
      <link>https://CorPython.github.io/post/pacman%E5%8C%85%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 13 Nov 2019 16:51:48 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/pacman%E5%8C%85%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</guid>
      <description>Pacman指令 1.安装软件 sudo pacman -S 软件名 2.更新软件源并更新你的软件 sudo pacman -Syu 3.查询软件 sudo pacman -Ss 软件名 4.请理已安装的软件的缓存(安装包) sudo pacman -Sc 5.删除某个软件 只删除安装包 sudo pacman -R 软件名 删除安装包及其依赖 sudo pacman -Rs 软件名 在上面的基础上删除该软件的全局配置(推荐) sudo pacman -Rns 软件名 6.查询本地已经</description>
    </item>
    
    <item>
      <title>hugo限制摘要字数显示</title>
      <link>https://CorPython.github.io/post/hugo%E9%99%90%E5%88%B6%E6%91%98%E8%A6%81%E5%AD%97%E6%95%B0%E6%98%BE%E7%A4%BA/</link>
      <pubDate>Wed, 13 Nov 2019 16:09:51 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo%E9%99%90%E5%88%B6%E6%91%98%E8%A6%81%E5%AD%97%E6%95%B0%E6%98%BE%E7%A4%BA/</guid>
      <description>在首页显示博客时,我们通常不希望将所有的内容显示出来,只希望显示部分内容.我们通常会在config.toml中设定摘要的字数 summaryLength = 180 但是,只在配置文件中这样设置是没有效果的!!!!我们需要在每一篇博客的开头加上这样一句 isCJKLanguage: true 为了避免每次写博客时手动添加,我们可以将这一句写入模板中,打</description>
    </item>
    
    <item>
      <title>Matlab学习笔记</title>
      <link>https://CorPython.github.io/post/matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 13 Nov 2019 16:05:31 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>绘图 添加标签，标题，生成网格线，美化图形 x = [0:0.01:10]; y = sin(x); plot(x, y), xlabel(&amp;#39;x&amp;#39;), ylabel(&amp;#39;Sin(x)&amp;#39;), title(&amp;#39;Sin(x) Graph&amp;#39;), grid on,axis equal#添加网格线和美化图形 绘制多个函数 x = [0 : 0.01: 10]; y = sin(x); g = cos(x); plot(x, y, x, g, &amp;#39;.-&amp;#39;), legend(&amp;#39;Sin(x)&amp;#39;, &amp;#39;Cos(x)&amp;#39;) 绘制多个图象 plot(x,y,x,g) #等价于 plot(x,y) hold all#保留上次绘图并添加新的绘图 plot(x,g) 设置坐标轴的刻度范围 axis([xmin xmax ymin ymax]) axis([xmin xmax ymin ymax zmin zmax cmin cmax]); % 设置x，y，z轴的范围</description>
    </item>
    
    <item>
      <title>解决vscode终端中文乱码</title>
      <link>https://CorPython.github.io/post/vscode%E7%BB%88%E7%AB%AF%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</link>
      <pubDate>Mon, 11 Nov 2019 20:40:54 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vscode%E7%BB%88%E7%AB%AF%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</guid>
      <description>解决vscode终端中文乱码 1.查看cmd窗口编码，GBK的编码为936，cmd的默认编码为GBK,而很多编译器的默认编码为UTF-8，所以中文会出现乱码，比如vscode下默认编码为UTF-8 使用chcp查看cmd的编码，如果不是UTF-8，可以使用chcp 65001这个命令 2</description>
    </item>
    
    <item>
      <title>hugo博客如何使用gittalk</title>
      <link>https://CorPython.github.io/post/hugo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8gittalk%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 11 Nov 2019 18:59:30 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8gittalk%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</guid>
      <description>1.进入github官方网站,登陆自己的github-&amp;gt;settings-&amp;gt;Devloper settings-&amp;gt;Github Apps会出现下图 Application name:给应用起个名字,根据自己的想法 Homepage:写你的博客地址 Application description:为你的应用写一段描述 Application callback URL:回调地址,可以写你的博客</description>
    </item>
    
    <item>
      <title>解决git远程和本地分支不同步</title>
      <link>https://CorPython.github.io/post/%E4%BF%AE%E5%A4%8Dgitpush%E5%88%B0github%E5%87%BA%E9%94%99%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 11 Nov 2019 18:46:33 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E4%BF%AE%E5%A4%8Dgitpush%E5%88%B0github%E5%87%BA%E9%94%99%E9%97%AE%E9%A2%98/</guid>
      <description>error: failed to push some refs to &amp;lsquo;git@github.com:xxx. git&amp;rsquo; 当执行了git push -u origin master时,有时候会出现下图中的错误,主要时本地的代码和远程代码仓库的代码出现了冲突,需要同步远程的master 分支 要解决上述的冲突很简单,只需要下面两条指令即可完成 git pull origin master git push -u origin master</description>
    </item>
    
    <item>
      <title>Gittalk报错Error: Validation Failed</title>
      <link>https://CorPython.github.io/post/gittalk%E5%87%BA%E9%94%99%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Mon, 11 Nov 2019 18:14:21 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/gittalk%E5%87%BA%E9%94%99%E8%A7%A3%E5%86%B3/</guid>
      <description>gittalk 是一个基于 Github Issue 和 Preact 开发的评论插件。它除了支持 Hexo 外，还支持 java，php 等语言开发的博客,当然我现在使用的hugo博客也是支持的.详情请点击gittalk官网 但是如果标题的字节过长(建议标题起短一些),会出现ERROR:Validation Failed这个错误 解决方案 1.找到配</description>
    </item>
    
    <item>
      <title>windows连接mongodb数据库</title>
      <link>https://CorPython.github.io/post/windows%E8%BF%9E%E6%8E%A5mongodb%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Sun, 10 Nov 2019 20:30:14 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/windows%E8%BF%9E%E6%8E%A5mongodb%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>1.打开git-bash或者其他命令行工具,输入下列命令 mongod --dbpath /d/MongoDB/Server/4.0/data/db //dbpath后面是mongodb数据库的绝对路径 2.打开mongodb compass数据库管理软件,连接数据库 3.连接成功</description>
    </item>
    
    <item>
      <title>Windows大量软件安装后乱码解决</title>
      <link>https://CorPython.github.io/post/windows%E5%A4%A7%E9%87%8F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%90%8E%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Fri, 08 Nov 2019 20:46:48 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/windows%E5%A4%A7%E9%87%8F%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%90%8E%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</guid>
      <description>写在前面 你是不是经常遇到windows软件安装后输入窗口输入中文全是乱码或者中文根本不能输入,本人也曾经遇到过这种问题,曾经使用的Dev C++5.11就出现过这种情况,虽然环境改成了中文却全是乱码,搜遍全网,也没有找到结果,就在不久前,我终于知道了问题的解决办法,请根据下列步骤进</description>
    </item>
    
    <item>
      <title>vscode配置c/c&#43;&#43;编译运行环境</title>
      <link>https://CorPython.github.io/post/vscode%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Thu, 07 Nov 2019 20:32:46 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vscode%E9%85%8D%E7%BD%AE/</guid>
      <description>vscode作为一个优秀的编辑器,以轻度,高效,美观著名.但是配置c语言确实对新手很不友好.所以我这里保存了最新版的vscode的c/c++配置文件 使用者只要直接在.vscode 文件夹下建立launch.json和tasks.json配置文件即可 注意:在所有的mingw64的位置</description>
    </item>
    
    <item>
      <title>hugo发布博客流程</title>
      <link>https://CorPython.github.io/post/hugo%E6%8F%90%E4%BA%A4%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 07 Nov 2019 19:54:17 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/hugo%E6%8F%90%E4%BA%A4%E5%8D%9A%E5%AE%A2/</guid>
      <description>在博客根目录下运行下面命令,并在post目录下生成markdown博客文件 hugo new post/xxxx.md 在博客根目录下运行下面命令 hugo //将本地文件重新编译 hugo server//在本地生成 注意,可以在本地查看博客变化,等自己觉得合适了就可以使用下面命令提交到github 在hugo本地的public目录下使用如</description>
    </item>
    
    <item>
      <title>github基本操作</title>
      <link>https://CorPython.github.io/post/github%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Thu, 07 Nov 2019 19:23:28 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/github%E7%9B%B8%E5%85%B3/</guid>
      <description>1.创建一个新仓库repo mkdir repo//创建一个新文件夹 cd repo//进入这个文件夹 git init//初始化这个仓库 ll .git/.git文件中的相关信息 .git文件中的信息有以下 config 文件包含了项目特有的配置选项 description仓库的描述 HEAD 文件指向当前分支 hooks 目录保存了客户端或服务端</description>
    </item>
    
    <item>
      <title>linux基础命令</title>
      <link>https://CorPython.github.io/post/linux%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 07 Nov 2019 19:23:28 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/linux%E5%91%BD%E4%BB%A4/</guid>
      <description>linux基本命令 目录切换命令 cd usr： 切换到该目录下usr目录 cd ..（或cd../）： 切换到上一层目录 cd /： 切换到系统根目录 cd ~： 切换到用户主目录 cd -： 切换到上一个操作所在目录 目录的操作命令 mkdir 目录名称： 增加目录 mkdir 文件夹名 &amp;amp;&amp;amp; cd 文件夹名:创建一个新文件夹并打开 ls或者ll（ll是l</description>
    </item>
    
    <item>
      <title>vim基础操作</title>
      <link>https://CorPython.github.io/post/vim%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 07 Nov 2019 19:23:28 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vim%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/</guid>
      <description>vim指令 基础命令 h上 j下 k 上 l右 b:回退 p:粘贴 y:复制 u:撤消 d:剪切 i:进入insert模式 a:在当前光标后进入insert模式 o:在当前光标的下一行进入insert模式 c:剪切并进入insert模式 v：直接进入可视化visual模式 V：选择光标所在行并进入visual模式</description>
    </item>
    
    <item>
      <title>Vscode快捷键</title>
      <link>https://CorPython.github.io/post/vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Thu, 07 Nov 2019 19:23:28 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>vscode vs code 的常用快捷键 1、注释： a) 单行注释：[ctrl+k,ctrl+c] 或 ctrl+/ b) 取消单行注释：[ctrl+k,ctrl+u] (按下ctrl不放，再按k + u) c) 多行注释：[alt+shift+A] d) 多行注释：/** 2、移动行：alt+up/down，选中按TAB右移，按SHIFT+TAB</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://CorPython.github.io/about/</link>
      <pubDate>Thu, 07 Nov 2019 19:23:28 +0800</pubDate>
      
      <guid>https://CorPython.github.io/about/</guid>
      <description>关于本站 建立时间: 2019/11/07 关于本人 懒得写,没啥好写的 联系方式</description>
    </item>
    
    <item>
      <title>leetcode</title>
      <link>https://CorPython.github.io/leetcode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://CorPython.github.io/leetcode/</guid>
      <description>leetcode刷题汇总 简单 leetcode-1 [两数之和] (hashmap)
解题链接:点这里
leetcode-13 [罗马数字转整数] (hashmap)
解题链接:点这里
leetcode-20 [有效的括号] (栈)
解题链接:点这里
leetcode-202 [快乐数] (快慢指针/hashmap)
解题链接:点这里
leetcode-290 [单词规律] (hashmap)
解题链接:点这里
leetcode-349 [两个数组的交集] (hashset/双指针/二分查找)
解题链接:点这里
leetcode-461 [汉明距离] (位运算)
解题链接:点这里
leetcode-709 [大写转小写] (位运算/遍历)
解题链接:点这里
leetcode-771 [宝石和石头] (字符串匹配/正则/hashmap)
解题链接:点这里
leetcode-832 [翻转图像] (双指针)
解题链接:点这里
leetcode-1281 [整数的各位积和之差] (模10取整)
解题链接:点这里
leetcode-1323 [6和9组成的最大数字] (字符串和数字的转换)
解题链接:点这里
中等 leetcode-11 [盛最多水的容器] (双指针)
解题链接:点这里
leetcode-137 [只出现一次的数字 II] (hashmap/排序/位运算)
解题链接:点这里
leetcode-287 [寻找重复数] (hash/排序)
解题链接:点这里</description>
    </item>
    
    <item>
      <title>书单</title>
      <link>https://CorPython.github.io/books/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://CorPython.github.io/books/</guid>
      <description>c语言  c primer plus第六版 c和指针 c陷阱缺陷  c++  c++ priper plus c++ Primer STL源码剖析  java  java核心技术卷一 java核心技术卷二 java编程思想(难)  python  python编程从入门到实战 python核心编程 流畅的python  go  Go语言实战  javaEE  Spring实战 Spring Boot实战 Spring技术内幕(源码分析)  数据库   MySQL必知必会
  高性能MySQL
  linux  鸟哥的Linux私房菜 基础学习篇第四版 Unix环境高级编程  计算机网络  TCP/IP详解 计算机网络 自顶向下方法  算法  啊哈算法 算法第四版  代码质量  重构 改善既有代码的设计  </description>
    </item>
    
    <item>
      <title>归档</title>
      <link>https://CorPython.github.io/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://CorPython.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://CorPython.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://CorPython.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>