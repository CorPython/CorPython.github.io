<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c&#43;&#43; on code show的博客</title>
    <link>https://CorPython.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in c&#43;&#43; on code show的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Feb 2020 18:54:19 +0800</lastBuildDate>
    
	<atom:link href="https://CorPython.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43;中关于数组的动态初始化问题</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E4%B8%AD%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E7%9A%84%E5%8A%A8%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 19 Feb 2020 18:54:19 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E4%B8%AD%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E7%9A%84%E5%8A%A8%E6%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E9%97%AE%E9%A2%98/</guid>
      <description>这是一段c++代码; #include &amp;lt;iostream&amp;gt; using namespace std; int main() { int len = 5; int arr[len] { 0 }; for (size_t i = 0; i &amp;lt; len; i++) { cout &amp;lt;&amp;lt; arr[i] &amp;lt;&amp;lt; endl; } return 0; } 我们先看在g++中的运行情况: 我们将arr数组初始化为0.并输出,得到了正确的结果 然后我们在vs2019中运行,vs2019使用的是msvc编译器 直接运行出了错,因为动态数组长度必须是常量</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11部分新特性</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;11%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E6%80%A7/</link>
      <pubDate>Mon, 03 Feb 2020 14:59:59 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;11%E9%83%A8%E5%88%86%E6%96%B0%E7%89%B9%E6%80%A7/</guid>
      <description>Variadic Templates 数量不定的模板参数 template &amp;lt;typename T1, typename... TS&amp;gt; //可以接受至少一个模板类型 template &amp;lt;typename... TS&amp;gt; //至少0个 递归分解可变参数函数的参数包 #include&amp;lt;iostream&amp;gt;#include&amp;lt;bitset&amp;gt; using namespace std; //当参数到0时,必须定义一个边界,不写这个报错 void print() {} //...就是pack（包） template&amp;lt;typename T, typename... Types&amp;gt; //模板参数包 void print(const T&amp;amp;fristArg, const Types &amp;amp;...args) {//types函数参数类型包，args函数参数包</description>
    </item>
    
    <item>
      <title>C&#43;&#43;中的const</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E4%B8%AD%E7%9A%84const/</link>
      <pubDate>Sun, 02 Feb 2020 11:12:17 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E4%B8%AD%E7%9A%84const/</guid>
      <description>const 变量 const变量指的是,此变量是只读的,不能被改变 如果我们在程序中试图改变const变量的值,编译器将报错,因此每次定义一个const变量时必须进行初始化 const int num = 15;//正确 const int num;//错误,必须进行初始化 const 结构体 和const int相同,必须在定义的时候进行初始化,并且</description>
    </item>
    
    <item>
      <title>C&#43;&#43;编译错误2</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF2/</link>
      <pubDate>Sat, 01 Feb 2020 16:22:33 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF2/</guid>
      <description>&amp;lsquo;shared_ptr&amp;rsquo; was not declared in this scope 在我编译下面这段代码时,对于智能指针shared_ptr编译出错 #include &amp;lt;string&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;memory&amp;gt; //shared_ptr class Base1 { }; class Derived1: public Base1 { }; class Base2 { }; class Derived2: public Base2 { }; template &amp;lt;class T1, class T2&amp;gt; struct pair { typedef T1 first_type; typedef T2 second_type; T1 first; T2 second; pair() : first(T1()), second(T2()) {} pair(const T1&amp;amp; a, const T2&amp;amp; b) : first(a), second(b) {} template &amp;lt;class U1, class U2&amp;gt; pair(const pair&amp;lt;U1, U2&amp;gt;&amp;amp; p) : first(p.first), second(p.second) {} }; int main(int argc, char const *argv[]) { pair&amp;lt;Derived1, Derived2&amp;gt; p; pair&amp;lt;Base1, Base2&amp;gt; p2(pair&amp;lt;Derived1, Derived2&amp;gt;()); pair&amp;lt;Base1, Base2&amp;gt; p3(p); // pair&amp;lt;Derived1, Derived2&amp;gt; p4(p3); // error: no matching function for call to</description>
    </item>
    
    <item>
      <title>C&#43;&#43;编译错误之与标准库函数冲突</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E4%B9%8B%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93%E5%87%BD%E6%95%B0%E5%86%B2%E7%AA%81/</link>
      <pubDate>Sat, 01 Feb 2020 15:10:38 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E4%B9%8B%E4%B8%8E%E6%A0%87%E5%87%86%E5%BA%93%E5%87%BD%E6%95%B0%E5%86%B2%E7%AA%81/</guid>
      <description>error: call of overloaded &amp;lsquo;swap(int&amp;amp;, int&amp;amp;)&amp;rsquo; is ambiguous swap(a,b); 最近使用模板template写了一个swap函数,编译之后竟然出错了 代码如下: #include &amp;lt;iostream&amp;gt; using namespace std; template&amp;lt;class T&amp;gt; void swap(T&amp;amp; a, T&amp;amp; b) { T temp = b; b = a; a = temp; } int main(int argc, char const *argv[]) { int a = 15,b = 20; swap(a,b); cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; b &amp;lt;&amp;lt; endl; float m = 15,n = 22; swap(m,n); cout &amp;lt;&amp;lt; m &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; n &amp;lt;&amp;lt; endl; return 0; } 报错信息 原因是因为标准库中已经定义过这个函数,只</description>
    </item>
    
    <item>
      <title>C&#43;&#43;面向对象程序设计(2)</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A12/</link>
      <pubDate>Thu, 30 Jan 2020 18:50:05 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A12/</guid>
      <description>Static static function没有this pointer,静态函数只能处理静态的数据. class template 类模板 声明方法： template &amp;lt;typename 标识符&amp;gt; 编译器从调用实参的类型，推导出函数模板的类型的参数。 template &amp;lt;typename T&amp;gt; class complex { public: complex(T r = 0, T i = 0 ) : re (r), im (i) { } complex&amp;amp; operator += ( const complex&amp;amp; ); T real () const {return re;} T imag () const {return im;} void real(T r) { re = r; } T func(const complex&amp;amp; param) { return param.re</description>
    </item>
    
    <item>
      <title>c&#43;&#43;中的大小写转换</title>
      <link>https://CorPython.github.io/post/%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Wed, 22 Jan 2020 15:12:24 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2/</guid>
      <description>在不适用库函数的基础上将字符串中的字母进行大小写转换 所有的小写字母转换为大写字母 #include &amp;lt;iostream&amp;gt;using namespace std; string toLower(string s) { for(auto &amp;amp;i:s) { i &amp;amp;= -33; } return s; } int main(int argc, char const *argv[]) { string str = &amp;#34;aAAb&amp;#34;; cout &amp;lt;&amp;lt; toLower(str) &amp;lt;&amp;lt; endl; return 0; } 输出结果:AAAB 所有的大写字母转换为小写字母 #include &amp;lt;iostream&amp;gt;using namespace std; string toLower(string s) { for(auto &amp;amp;i:s) { i |= 32; } return s; } int main(int argc, char const *argv[]) { string str = &amp;#34;aAAb&amp;#34;; cout &amp;lt;&amp;lt; toLower(str) &amp;lt;&amp;lt; endl; return 0; } 输出结</description>
    </item>
    
    <item>
      <title>STL基础用法</title>
      <link>https://CorPython.github.io/post/STL%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</link>
      <pubDate>Tue, 14 Jan 2020 20:35:27 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/STL%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</guid>
      <description>STL:Standard Template Library 标准模板库 序列式容器[Sequential Containers] Array(数组) Vector(单向变长数组) Deque(双向变长数组) List(双向链表) Forward-List(单向链表) 关联式容器[Associative Containers] Set/Multiset(不重复/可重复集合) Map/Multim</description>
    </item>
    
    <item>
      <title>C&#43;&#43;基础笔记(2)</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B02/</link>
      <pubDate>Tue, 14 Jan 2020 10:52:48 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B02/</guid>
      <description>转换函数 [conversion function] #include &amp;lt;iostream&amp;gt; using namespace std; class Fraction { public: Fraction(int num, int den = 1) : m_numerator(num), m_denominator(den) {} operator double() const { //转换函数,将Fraction转换为double return (double)m_numerator / m_denominator; } private: int m_numerator;//分子 int m_denominator;//分母 }; int main() { Fraction f(3, 5); double d = 4 + f; cout &amp;lt;&amp;lt; d &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; f &amp;lt;&amp;lt; endl; //f的值为0.6 return 0; } 任何Fractio</description>
    </item>
    
    <item>
      <title>查看自己的编译器支持的c&#43;&#43;标准</title>
      <link>https://CorPython.github.io/post/%E6%9F%A5%E7%9C%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BC%96%E8%AF%91%E5%99%A8%E6%94%AF%E6%8C%81%E7%9A%84c&#43;&#43;%E6%A0%87%E5%87%86/</link>
      <pubDate>Thu, 09 Jan 2020 19:28:20 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E6%9F%A5%E7%9C%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BC%96%E8%AF%91%E5%99%A8%E6%94%AF%E6%8C%81%E7%9A%84c&#43;&#43;%E6%A0%87%E5%87%86/</guid>
      <description>在自己的编译器中运行下面代码 #include &amp;lt;iostream&amp;gt;using namespace std; int main(int argc, char const *argv[]) { cout &amp;lt;&amp;lt; __cplusplus &amp;lt;&amp;lt; endl; return 0; } 我的编译器的运行结果是: 201402 下面是对应的c++标准的值: C ++ 98：__cplusplus是199711L。 C ++ 11：__cplusplus是201103L。 C ++ 14：__cplusplus是201402L。 C ++ 17：</description>
    </item>
    
    <item>
      <title>C&#43;&#43;面向对象程序设计(1)</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 08 Jan 2020 11:53:35 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</guid>
      <description>Classes的两个经典分类 Class without pointer member(s) ![]( Class with pointer member(s) ) Header中的防卫式声明 complex.h #ifndef __COMPLEX__ #define __COMPLEX__ #endif inline function 函数若在class body内定义完成，便自动成为inline function的候选人. class body之外定义的函数，需要加上inline关键字，以此建议编译器将其编译为inline function constr</description>
    </item>
    
    <item>
      <title>Sublime Text搭建c/c&#43;&#43;编译运行环境</title>
      <link>https://CorPython.github.io/post/sumblime%E5%88%9B%E5%BB%BAc_c&#43;&#43;%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Tue, 07 Jan 2020 16:06:27 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/sumblime%E5%88%9B%E5%BB%BAc_c&#43;&#43;%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</guid>
      <description>前言 我配置的c/c++环境主要是为了写一些简单的算法或者小程序,看重的是Sublime Text 3的轻量,启动速度快,其次你必须先将自己的cmd设置为默认utf-8编码,这样做主要是为了防止一些编码问题,如果你习惯使用GBK编码,请不要看下面的配置 ! ! ! 设置cmd为默认UTF-8 使用快捷</description>
    </item>
    
    <item>
      <title>C&#43;&#43;编译错误1</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 07 Jan 2020 15:50:02 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E7%AC%94%E8%AE%B0/</guid>
      <description>编译cpp文件时报错: ld.exe: can not open file ...xxx.exe:permission denied collect2.exe error ld returned 1 exit status 原因:代码当前目录（包括子目录）下有同名的.exe文件，会报此错误，只要把名字改一下就行了</description>
    </item>
    
    <item>
      <title>C&#43;&#43;基础笔记(1)</title>
      <link>https://CorPython.github.io/post/c&#43;&#43;%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sun, 05 Jan 2020 16:51:13 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c&#43;&#43;%E5%9F%BA%E7%A1%80/</guid>
      <description>输入输出 #include &amp;lt;iostream&amp;gt;using namespace std; //c++输入输出 int main() { string str = &amp;#34;hello world!&amp;#34;; int a; //endl有换行的功能 cout &amp;lt;&amp;lt; str &amp;lt;&amp;lt; endl; cin &amp;gt;&amp;gt; a; cout &amp;lt;&amp;lt; a &amp;lt;&amp;lt; &amp;#34;\n&amp;#34;; cout &amp;lt;&amp;lt; a; return 0; } using namespace std ,它声明了命名空间 std,后续如果有未指定命名空间的符号,那么默认使用 std,这样就可以使用 cin,cout,vector 等。 cin 用于从控制台获取用户输入,cout 用于将数据输出到控制台 cin</description>
    </item>
    
    <item>
      <title>C/c&#43;&#43;排序</title>
      <link>https://CorPython.github.io/post/c%E8%AF%AD%E8%A8%80%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Wed, 25 Dec 2019 21:53:10 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/c%E8%AF%AD%E8%A8%80%E6%8E%92%E5%BA%8F/</guid>
      <description>c++ 1.sort()函数 头文件#include&amp;lt;algorithm&amp;gt; #include&amp;lt;iostream&amp;gt;#include&amp;lt;algorithm&amp;gt; using namespace std; int main() { int a[10]= {9,6,3,8,5,2,7,4,1,0}; for(int i=0; i&amp;lt;10; i++) cout&amp;lt;&amp;lt;a[i]&amp;lt;&amp;lt;&amp;#34;&amp;#34;; cout&amp;lt;&amp;lt;endl; //数组长度 cout &amp;lt;&amp;lt; sizeof(a)/sizeof(a[0]) &amp;lt;&amp;lt; endl; sort(a,a+10);//注意是加上数组长度 for(int i=0; i&amp;lt;10; i++) cout&amp;lt;&amp;lt;a[i]&amp;lt;&amp;lt;&amp;#34;&amp;#34;; return 0; } sort()自定义函数 #include&amp;lt;iostream&amp;gt;#include&amp;lt;vector&amp;gt;#include&amp;lt;algorithm&amp;gt; using namespace std; bool Comp(const int &amp;amp;a,const int &amp;amp;b) { return a&amp;gt;b; } int main() { vector&amp;lt;int&amp;gt; v; for (int i = 0; i &amp;lt; 10; ++i) { v.push_back(i +</description>
    </item>
    
  </channel>
</rss>