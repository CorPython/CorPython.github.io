<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>github on code show的博客</title>
    <link>https://CorPython.github.io/tags/github/</link>
    <description>Recent content in github on code show的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Dec 2019 17:27:01 +0800</lastBuildDate>
    
	<atom:link href="https://CorPython.github.io/tags/github/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>fatal: remote error: You can&#39;t push to git 解决办法</title>
      <link>https://CorPython.github.io/post/gitpush%E5%87%BA%E9%94%99/</link>
      <pubDate>Sun, 29 Dec 2019 17:27:01 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/gitpush%E5%87%BA%E9%94%99/</guid>
      <description>错误描述 fatal: remote error: You can&amp;#39;t push to git://github.com:CorPython/java_repo.git Use git@github.com:CorPython/java_repo.git 原因:如果在git clone的时候用的是git://github.com:xx/xxx.git的形式,那么就会出现这个问题 解决方案 输入下面的指令 git remote rm origin git remote add origin git@github.com:CorPython/java_repo.git git push origin 会出现下面的提示 输入上述的命令即可 git push --set-upstream origin master 成功上传!</description>
    </item>
    
    <item>
      <title>git操作笔记</title>
      <link>https://CorPython.github.io/post/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 23 Dec 2019 14:19:00 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>github及git版本控制 git基本操作 1.创建一个版本库 新建一个目录git_test,在git_test目录下创建一个版本库 git init 2.在git_test下创建一个新文件code.txt vi code.txt#创建一个新文件 cat code.txt#查看文件中的内容 3.新建一个文件版本（比</description>
    </item>
    
    <item>
      <title>GitHub&#43;jsDelivr&#43;PicGo打造稳定快速高效图床</title>
      <link>https://CorPython.github.io/post/GitHub&#43;jsDelivr&#43;PicGo%E6%89%93%E9%80%A0%E7%A8%B3%E5%AE%9A%E5%BF%AB%E9%80%9F%E9%AB%98%E6%95%88%E5%9B%BE%E5%BA%8A/</link>
      <pubDate>Wed, 27 Nov 2019 20:06:38 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/GitHub&#43;jsDelivr&#43;PicGo%E6%89%93%E9%80%A0%E7%A8%B3%E5%AE%9A%E5%BF%AB%E9%80%9F%E9%AB%98%E6%95%88%E5%9B%BE%E5%BA%8A/</guid>
      <description>前言 用hugo写博客可能图片是比较重要的一环吧.本来时指望在博客中使用本地的图片,但是由于自己的能力有限,并且看了一些大神都不推荐使用本地图片.推荐使用图床来管理自己的博客图片. 常见的免费图床建议参考这篇文章:盘点一下免费好用的图床 但是,今天不是介绍免费图床的使用,这次主要是介绍</description>
    </item>
    
    <item>
      <title>Github同步fork的项目</title>
      <link>https://CorPython.github.io/post/github%E5%90%8C%E6%AD%A5fork%E7%9A%84%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Wed, 13 Nov 2019 18:30:44 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/github%E5%90%8C%E6%AD%A5fork%E7%9A%84%E9%A1%B9%E7%9B%AE/</guid>
      <description>给出两种方法 1.使用git指令进行更新 git remote -v git remote add upstream git@github.com:xxx/xxx.git git fetch upstream git merge upstream/master 2.在Github Desktop上更新</description>
    </item>
    
    <item>
      <title>解决git远程和本地分支不同步</title>
      <link>https://CorPython.github.io/post/%E4%BF%AE%E5%A4%8Dgitpush%E5%88%B0github%E5%87%BA%E9%94%99%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 11 Nov 2019 18:46:33 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/%E4%BF%AE%E5%A4%8Dgitpush%E5%88%B0github%E5%87%BA%E9%94%99%E9%97%AE%E9%A2%98/</guid>
      <description>error: failed to push some refs to &amp;lsquo;git@github.com:xxx. git&amp;rsquo; 当执行了git push -u origin master时,有时候会出现下图中的错误,主要时本地的代码和远程代码仓库的代码出现了冲突,需要同步远程的master 分支 要解决上述的冲突很简单,只需要下面两条指令即可完成 git pull origin master git push -u origin master</description>
    </item>
    
    <item>
      <title>github基本操作</title>
      <link>https://CorPython.github.io/post/github%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Thu, 07 Nov 2019 19:23:28 +0800</pubDate>
      
      <guid>https://CorPython.github.io/post/github%E7%9B%B8%E5%85%B3/</guid>
      <description>1.创建一个新仓库repo mkdir repo//创建一个新文件夹 cd repo//进入这个文件夹 git init//初始化这个仓库 ll .git/.git文件中的相关信息 .git文件中的信息有以下 config 文件包含了项目特有的配置选项 description仓库的描述 HEAD 文件指向当前分支 hooks 目录保存了客户端或服务端</description>
    </item>
    
  </channel>
</rss>